<workflow-app xmlns="uri:oozie:workflow:0.3" name="malware-workflow">

    <start to="makeSequenceFile" />

    <action name="makeSequenceFile">
        <java>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapreduce.framework.name</name>
                    <value>yarn</value>
                </property>
            </configuration>
            <main-class>net.redborder.malware.util.BuildSequenceFileFromS3</main-class>
            <arg>${sequence_file_output_path_name}</arg>
            <arg>${name_node}/${file_flag_path}</arg>
            <arg>${aws_access_key}</arg>
            <arg>${aws_secret_key}</arg>
        </java>
        <ok to="makeDecision0" />
        <error to="fail" />
    </action>

    <decision name="makeDecision0">
        <switch>
            <case to="virustotal">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>

    <action name="virustotal">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>virustotal.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT=${out_put_prefix_path}/virustotal'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>API_KEY='${virustotal_api_key}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${malware_library}#malwarepig.jar</file>
        </pig>
        <ok to="makeDecision1" />
        <error to="fail" />
    </action>

    <decision name="makeDecision1">
        <switch>
            <case to="metascan">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>

    <action name="cuckoo">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>virustotal.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT=${out_put_prefix_path}/cuckoo'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>MAX_RETRIES='${max_retries}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${malware_library}#malwarepig.jar</file>
        </pig>
        <ok to="makeDecision2" />
        <error to="fail" />
    </action>



    <decision name="makeDecision2">
        <switch>
            <case to="metascan">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>

    <action name="metascan">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>metascan.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT=${out_put_prefix_path}/metascan'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>API_KEY='${metascan_api_key}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${malware_library}#malwarepig.jar</file>
        </pig>
        <ok to="makeDecision3" />
        <error to="fail" />
    </action>

    <decision name="makeDecision3">
        <switch>
            <case to="clamscan">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>

    <action name="hasher">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>hasher.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT=${out_put_prefix_path}/hasher'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${scripts_path}#scripts</file>
        </pig>
        <ok to="makeDecision4" />
        <error to="fail" />
    </action>
    <decision name="makeDecision4">
        <switch>
            <case to="metascan">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>

    <action name="kaspersky">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>kaspersky.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT=${out_put_prefix_path}/kaspersky'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${scripts_path}#scripts</file>
        </pig>
        <ok to="makeDecision5" />
        <error to="fail" />
    </action>


    <decision name="makeDecision5">
        <switch>
            <case to="metascan">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>

    <action name="yara">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>yara.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT=${out_put_prefix_path}/yara'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${yara_rules}#yara_rules</file>
        </pig>
        <ok to="makeDecision6" />
        <error to="fail" />
    </action>
    <decision name="makeDecision6">
        <switch>
            <case to="metascan">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="true"}</case>
            <case to="end">${fs:exists('${name_node}/${wf:actionData('makeSequenceFile')['gridgainKey']}')=="false"}</case>
            <default to="fail" />
        </switch>
    </decision>
    <action name="clamscan">
        <pig>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.job.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapred.compress.map.output</name>
                    <value>true</value>
                </property>
            </configuration>
            <script>clamscan.pig</script>
            <param>INPUT='${in_put_prefix_path}/malware'</param>
            <param>OUTPUT='${out_put_prefix_path}/clamscan'</param>
            <param>TIMEOUT_MS='${timeout_ms}'</param>
            <param>USE_DEVSHM='${use_devshm}'</param>
            <param>GRIDGAIN_KEY='${wf:actionData('makeSequenceFile')['gridgainKey']}'</param>
            <file>${malware_library}#malwarepig.jar</file>
        </pig>
        <ok to="cleanerJava" />
        <error to="fail" />
    </action>

    <action name="cleanerJava">
        <java>
            <job-tracker>${job_tracker}</job-tracker>
            <name-node>${name_node}</name-node>
            <configuration>
                <property>
                    <name>mapred.queue.name</name>
                    <value>${queue_name}</value>
                </property>
                <property>
                    <name>mapreduce.framework.name</name>
                    <value>yarn</value>
                </property>
            </configuration>
            <main-class>net.redborder.malware.oozie.javactions.CleanerOozieAction</main-class>
            <arg>${out_put_prefix_path}/clean.json</arg>
        </java>
        <ok to="end" />
        <error to="fail" />
    </action>

    <kill name="fail">
        <message>Pig failed, error message[${wf:errorMessage(wf:lastErrorNode())}]</message>
    </kill>

    <end name="end" />

</workflow-app>