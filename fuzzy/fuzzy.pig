register '/opt/rb/var/rb-sequence-oozie/workflow/lib/rb-malware-pig.jar'
set mapred.create.symlink yes;
set mapred.cache.files hdfs://rbhadoop/user/oozie/aerospike.yml#aerospike.yml,hdfs://rbhadoop/user/oozie/weights.yml#weights.yml;

%declare uuid `uuidgen`
%declare day `date +%Y-%m-%d_%H`

A = LOAD '/user/oozie/fuzzy/*/*' USING JsonLoader('sdhash:chararray,timestamp: int,SHA256:chararray,pehash:chararray,ssdeep:chararray');
SSDEEP = foreach A generate timestamp,SHA256,ssdeep;
SSDEEP = DISTINCT SSDEEP;

SSDEEP_STORED = LOAD '/user/oozie/ssdeep/last/' USING PigStorage(',') as (timestamp: int, SHA256:chararray,ssdeep:chararray);
SSDEEP_STORED =  ORDER SSDEEP_STORED BY timestamp DESC;
SSDEEP_STORED = LIMIT SSDEEP_STORED <%= node["redBorder"]["manager"]["rb-sequence-oozie"]["ssdeep_oldhashes_limit"] %>;
SSDEEP_STORED = DISTINCT SSDEEP_STORED;

SSDEEP_NEW = UNION SSDEEP, SSDEEP_STORED;
SSDEEP_NEW = FILTER SSDEEP_NEW BY $0 IS NOT NULL;
SSDEEP_NEW = DISTINCT SSDEEP_NEW;

SSDEEP_MALWARE = LOAD '/user/oozie/ssdeep/malware' USING PigStorage(',') as (timestamp: int, SHA256: chararray, ssdeep: chararray);
SSDEEP_MALWARE = ORDER SSDEEP_MALWARE BY timestamp DESC;
SSDEEP_MALWARE = LIMIT SSDEEP_MALWARE <%= node["redBorder"]["manager"]["rb-sequence-oozie"]["ssdeep_malwarehashes_limit"] %>;
SSDEEP_MALWARE = FILTER SSDEEP_MALWARE BY $0 IS NOT NULL;
SSDEEP_MALWARE = DISTINCT SSDEEP_MALWARE;
SSDEEP_MALWARE = UNION SSDEEP_MALWARE, SSDEEP_NEW;
SSDEEP_TOCROSS = UNION SSDEEP_MALWARE, SSDEEP_NEW;

SSDEEP_TOCOMPARE = CROSS SSDEEP_MALWARE, SSDEEP_TOCROSS;
SSDEEP_TOCOMPARE = FILTER SSDEEP_TOCOMPARE BY $0 IS NOT NULL;
SSDEEP_TOCOMPARE = DISTINCT SSDEEP_TOCOMPARE;

SSDEEP_SCORES = FOREACH SSDEEP_TOCOMPARE GENERATE net.redborder.malware.loaders.ssdeep.Ssdeep( SSDEEP_MALWARE::timestamp,SSDEEP_MALWARE::SHA256, SSDEEP_MALWARE::ssdeep, SSDEEP_TOCROSS::timestamp,SSDEEP_TOCROSS::SHA256, SSDEEP_TOCROSS::ssdeep, 'rbhadoop', 'rbfgawnoirli.redborder.cluster:2181') AS t:tuple(timestamp:chararray,sha256:chararray,ssdeep:chararray,data:chararray);
SSDEEP_SCORES = FILTER SSDEEP_SCORES BY $0 IS NOT NULL;

SSDEEP_MALWARE = FOREACH SSDEEP_SCORES GENERATE t.timestamp,t.sha256,t.ssdeep;
SSDEEP_MALWARE = FILTER SSDEEP_MALWARE BY ssdeep IS NOT NULL;
SSDEEP_MALWARE = DISTINCT SSDEEP_MALWARE;

SSDEEP_DATA = FOREACH SSDEEP_SCORES GENERATE t.sha256,t.data;
SSDEEP_DATA = FILTER SSDEEP_DATA BY data IS NOT NULL;
SSDEEP_DATA = DISTINCT SSDEEP_DATA;

STORE SSDEEP INTO '/user/oozie/ssdeep/last/$day/$uuid' USING PigStorage (',');
STORE SSDEEP_MALWARE INTO '/user/oozie/ssdeep/malware/$day/$uuid' USING PigStorage(',');
STORE SSDEEP_DATA INTO '/user/oozie/sequence_file/compute/$day/$uuid/ssdeep';
STORE SSDEEP_DATA INTO '/user/oozie/resultData/realtime/$day/$uuid/' USING net.redborder.malware.storage.LoadersMergeStorage('rt');G net.redborder.malware.storage.LoadersMergeStorage('rt');