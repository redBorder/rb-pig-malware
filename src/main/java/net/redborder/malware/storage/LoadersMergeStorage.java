package net.redborder.malware.storage;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.compress.BZip2Codec;
import org.apache.hadoop.io.compress.GzipCodec;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.OutputFormat;
import org.apache.hadoop.mapreduce.RecordWriter;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.pig.StoreFunc;
import org.apache.pig.data.DataBag;
import org.apache.pig.data.Tuple;

import java.io.IOException;
import java.util.*;

public class LoadersMergeStorage extends StoreFunc {
    RecordWriter writer = null;
    ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public OutputFormat getOutputFormat() throws IOException {
        return new TextOutputFormat<>();
    }

    @Override
    public void setStoreLocation(String location, Job job) throws IOException {
        job.getConfiguration().set("mapred.textoutputformat.separator", "");
        FileOutputFormat.setOutputPath(job, new Path(location));
        if (location.endsWith(".bz2")) {
            FileOutputFormat.setCompressOutput(job, true);
            FileOutputFormat.setOutputCompressorClass(job, BZip2Codec.class);
        }  else if (location.endsWith(".gz")) {
            FileOutputFormat.setCompressOutput(job, true);
            FileOutputFormat.setOutputCompressorClass(job, GzipCodec.class);
        }
    }

    @Override
    public void prepareToWrite(RecordWriter writer) throws IOException {
        this.writer = writer;

    }

    @Override
    public void putNext(Tuple tuple) throws IOException {
        String sha256 = (String) tuple.get(0);
        List<Map<String, Object>> list = new ArrayList<>();

        Iterator<Tuple> tupleIter = ((DataBag)tuple.get(1)).iterator();

        while (tupleIter.hasNext()){
            String str = (String) tupleIter.next().get(0);
            Map<String, Object> map = objectMapper.readValue(str, Map.class);
            list.add(map);
        }

        Map<String, Object> result = new HashMap<>();
        result.put("sha256", sha256);
        result.put("data", list);

        String jsonResult = objectMapper.writeValueAsString(result);
        Text text = new Text(jsonResult.getBytes());

        try {
            writer.write(null, text);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
