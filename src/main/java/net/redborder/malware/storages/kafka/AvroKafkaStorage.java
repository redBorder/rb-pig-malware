package net.redborder.malware.storages.kafka;

/**
 * Date: 12/3/15 17:57.
 */

import java.io.IOException;
import java.io.OutputStream;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.avro.io.Encoder;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.OutputFormat;
import org.apache.hadoop.mapreduce.RecordWriter;
import org.apache.pig.ResourceSchema;
import org.apache.pig.StoreFunc;
import org.apache.pig.data.Tuple;

public class AvroKafkaStorage extends StoreFunc {
    protected KafkaRecordWriter<Object, String> writer;
    protected ObjectMapper mapper;

    @Override
    public OutputFormat getOutputFormat() throws IOException {
        return new KafkaOutputFormat();
    }

    @Override
    public String relToAbsPathForStoreLocation(String location, Path curDir) throws IOException {
        return location;
    }

    @Override
    public void setStoreLocation(String uri, Job job) throws IOException {
        KafkaOutputFormat.setOutputPath(job, new Path(uri));
    }

    @Override
    @SuppressWarnings("unchecked")
    public void prepareToWrite(RecordWriter writer) throws IOException {
        this.mapper = new ObjectMapper();
        this.writer = (KafkaRecordWriter) writer;
    }

    @Override
    public void cleanupOnFailure(String location, Job job) throws IOException {
    }

    @Override
    public void setStoreFuncUDFContextSignature(String signature) {
    }

    @Override
    public void checkSchema(ResourceSchema schema) throws IOException {
    }

    @Override
    public void putNext(Tuple tuple) throws IOException {

        try {
            if (tuple.size() > 0) {
                String json = mapper.writeValueAsString(tuple.get(0));
                System.out.println("JSON: " + json);
                this.writer.write(null, json);
            } else {
                System.out.println("TUPLE 0");
                this.writer.write(null, "TUPLE 0");

            }
        } catch (InterruptedException e) {
            throw new IOException(e);
        }
    }
}
