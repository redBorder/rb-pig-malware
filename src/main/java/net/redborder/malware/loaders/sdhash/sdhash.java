package net.redborder.malware.loaders.sdhash;

/**
 * Created by Lito on 26/6/15.
 */

/**
 * This work is made available under the Apache License, Version 2.0.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */


import com.amazonaws.util.json.JSONArray;
import com.amazonaws.util.json.JSONException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.*;
import org.apache.pig.EvalFunc;
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


public class Sdhash extends EvalFunc<Map> {

    String SHA256;
    String sdhash;
    Map<String,Object> map;
    Map<String,Object> relations;
    public Map exec(Tuple input) throws IOException{
        TupleFactory tupleFactory = TupleFactory.getInstance();
        ArrayList<Object> protoTuple = new ArrayList<>();

        map = new HashMap<>();
        relations = new HashMap<>();
        SHA256 = (String) input.get(0);
        sdhash = (String) input.get(1);
        map.put("SHA256",SHA256);
        map.put("sdhash",sdhash);

        StringBuilder scores = new StringBuilder();
        File file = new File("/home/hadoop/fuzzy/sdhash-file.sdbf");
        File file2 = new File("/home/hadoop/fuzzy/sdhash-file2.sdbf");

        try {
            FileWriter f2 = new FileWriter(file, false);
            f2.write(sdhash);
            f2.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

        Path pt=new Path("hdfs://rbh5bs0rffk2:8020/user/oozie/sdhash/current/part-r-00000");
        FileSystem fs = FileSystem.get(new Configuration());
        BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(pt)));
        System.out.println("El HASH a comparar es: "+sdhash);
        try {
            String line;
            line=br.readLine();
            while (line != null){
                String compared_sha = line.split(",")[0];
                try {
                    FileWriter fwriter = new FileWriter(file2, false);
                    fwriter.write(line.split(",")[1]);
                    System.out.println("Se está comparando con: "+line.split(",")[1] );
                    fwriter.close();

                } catch (IOException e) {
                    e.printStackTrace();
                }

                String[] cmd = new String[]{
                        "sdhash",
                        "-c",
                        file.getAbsolutePath(),
                        file2.getAbsolutePath(), "-t", "0"
                };

                ProcessBuilder processBuilder = new ProcessBuilder(cmd);
                processBuilder.redirectErrorStream(true);
                Process process = processBuilder.start();
                BufferedReader result = new BufferedReader(new InputStreamReader(process.getInputStream()));
                scores = new StringBuilder();
                while ((line = result.readLine()) != null) {
                    scores.append(line);
                    System.out.println("La linea antes de split es: " + line.toString());
                    System.out.println("El parseo es: "+  line.toString().split("\\|")[2]);
                    String score = line.toString().split("\\|")[2];
                    if (Integer.parseInt(score)>90) {
                        relations.put(compared_sha, score);
                    }
                    System.out.println("La comparación es:... " + scores.toString());
                }

                line = br.readLine();
            }
            map.put("similarity", relations);
            JSONArray jsonArray = new JSONArray();
            jsonArray.put(map);
            try {
                protoTuple.add(jsonArray.getString(0));
            } catch (JSONException e) {
                e.printStackTrace();
            }
        } finally {
            br.close();
        }

        return map;
    }


}