package net.redborder.malware.loaders.sdhash;



/**
 * This work is made available under the Apache License, Version 2.0.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */


import com.amazonaws.util.json.JSONArray;
import com.amazonaws.util.json.JSONException;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.aerospike.AeroSpikeManager;
import net.redborder.malware.util.kafka.KafkaManager;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.pig.EvalFunc;
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;

import java.io.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class Sdhash extends EvalFunc<Map> {

    String SHA256;
    String sdhash;
    String hdfs;
    Map<String, Object> map;
    Map<String, Object> relations;
    Integer score_compared;
    Integer score_torefresh;
    String malware_name_compared;
    ObjectMapper mapper;
    String zkHosts;
    long endtime;
    long timeoutMS = 20000;

    public Map exec(Tuple input) throws IOException {
        TupleFactory tupleFactory = TupleFactory.getInstance();
        ArrayList<Object> protoTuple = new ArrayList<>();

        map = new HashMap<>();
        relations = new HashMap<>();
        SHA256 = (String) input.get(0);
        sdhash = (String) input.get(1);
        hdfs = (String) input.get(2);
        zkHosts = (String) input.get(3);

        if (isMalware(SHA256)) {
            map.put("sha256", SHA256);
            map.put("sdhash", sdhash);

            StringBuilder scores = new StringBuilder();
            File file = new File("/tmp/fuzzy/sdhash-file.sdbf");
            File file2 = new File("/tmp/fuzzy/sdhash-file2.sdbf");


            File parent = file.getParentFile();

            if (!parent.exists() && !parent.mkdirs()) {
                throw new IllegalStateException("Couldn't create dir: " + parent);
            }
            File parent2 = file2.getParentFile();
            if (!parent2.exists() && !parent2.mkdirs()) {
                throw new IllegalStateException("Couldn't create dir: " + parent2);
            }

            try {
                FileWriter f2 = new FileWriter(file, false);
                f2.write(sdhash);
                System.out.println("Comparing File: " + SHA256);
                f2.close();

            } catch (IOException e) {
                e.printStackTrace();
            }

            Path pt = new Path("hdfs://" + hdfs + ":8020/user/oozie/sdhash/current/part-r-00000");
            FileSystem fs = FileSystem.get(new Configuration());
            BufferedReader br = new BufferedReader(new InputStreamReader(fs.open(pt)));


            fs.copyToLocalFile(false, pt, new Path(file2.getAbsolutePath()), true);

            try {
                long current;


                String[] cmd = new String[]{
                        "sdhash",
                        "-c",
                        file.getAbsolutePath(),
                        file2.getAbsolutePath(), "-t", "95"
                };

                ProcessBuilder processBuilder = new ProcessBuilder(cmd);
                this.endtime = (System.currentTimeMillis() + timeoutMS);
                processBuilder.redirectErrorStream(true);
                current = System.currentTimeMillis();
                System.out.println("Starting process");
                Process process = processBuilder.start();
                BufferedReader result = new BufferedReader(new InputStreamReader(process.getInputStream()));


                while (true) {
                    try {
                        process.exitValue();
                        System.out.println("Process ended: ");
                        break;
                    } catch (IllegalThreadStateException e) {
                        // process is still running...
                        try {
                            Thread.sleep(10);
                        } catch (InterruptedException e1) {
                            throw new RuntimeException(e1);
                        }
                    }
                }

                scores = new StringBuilder();

                String line;
                while ((line = result.readLine()) != null && !line.contains("ERROR")) {
                    System.out.println("Output: " + line);
                    String score = line.toString().split("\\|")[2];

                    if (Integer.parseInt(score) > 98) {

                        String compared_sha = line.split(":")[3];

                        relations.put(compared_sha, score);

                        // try {

                        if (!compared_sha.equals(SHA256)) {

                            Map malware = AeroSpikeManager.getInstance().getHash(SHA256);
                            if (malware != null) {
                                score_torefresh = (Integer) malware.get("score");
                            } else {
                                score_torefresh = 0;
                            }
                            if (score_torefresh < 80) {
                                Map malware2 = AeroSpikeManager.getInstance().getHash(compared_sha);

                                if (malware2 != null) {
                                    score_compared = (Integer) malware2.get("score");
                                    malware_name_compared = (String) malware2.get("malware_name");
                                    if (malware_name_compared == null) {
                                        malware_name_compared = "unknown";
                                    }

                                    if (!malware_name_compared.equals("clean")) {
                                        malware_name_compared = malware_name_compared + "-fuzzy";
                                    }

                                } else {
                                    score_compared = 0;
                                }
                                if (score_compared > 95) {
                                    Map<String, Object> data = new HashMap<>();

                                    String hostname = "";

                                    try {
                                        hostname = InetAddress.getLocalHost().getHostName();
                                    } catch (UnknownHostException e) {
                                        e.printStackTrace();
                                    }
                                    data.put("sha256", SHA256);
                                    data.put("timestamp", System.currentTimeMillis() / 1000);
                                    data.put("type", "sdhash");
                                    data.put("sensor_name", hostname);
                                    data.put("score", 80);
                                    data.put("malware_name", malware_name_compared);
                                    System.out.println("Sending kafka msg");
                                    System.out.println(data);
                                    mapper = new ObjectMapper();
                                    String send = mapper.writeValueAsString(data);
                                    KafkaManager.getInstance(zkHosts).send("rb_malware", send);
                                    List<String> columns = new ArrayList<>();
                                    List<Object> values = new ArrayList<>();
                                    data.put("cuckoo_before", isCuckooBefore(SHA256));

                                    columns.add("sha256");
                                    columns.add("score");
                                    columns.add("malware_name");
                                    values.add(data.get("sha256"));
                                    values.add(data.get("score"));
                                    values.add(data.get("malware_name"));

                                    AeroSpikeManager.getInstance().updateMalwareHashScore(SHA256, "sb_sdhash", (Long) data.get("score"), AbstractFileDroppingLoader.LoaderType.SLOW);

                                }


                            }
                        }

                    }
                }


                map.put("similarity", relations);
                JSONArray jsonArray = new JSONArray();
                jsonArray.put(map);
                try {
                    protoTuple.add(jsonArray.getString(0));
                } catch (JSONException e) {
                    e.printStackTrace();
                }

            } finally {
                br.close();
            }

            map.put("timestamp", System.currentTimeMillis() / 1000);
        } else {
            map.clear();
        }
        return map;

    }


    public boolean isCuckooBefore(String md5) {
        Boolean before = false;
        Map malware = AeroSpikeManager.getInstance().getHash(md5);
        if (malware != null) {
            before = (boolean)malware.get("cuckoo_before");
            if (before == null) {
                before = false;
            }
        }

        return before;
    }

    public boolean isMalware(String md5) {
        Boolean isMalware = false;
        Integer score;
        Map malware = AeroSpikeManager.getInstance().getHash(md5);
        if (malware != null) {
            score = (Integer)malware.get("score");
            if (score != null && score >= 80) {
                isMalware = true;
            }
        }
        return isMalware;
    }


}

