package net.redborder.malware.loaders.virustotal;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.VirusScanInfo;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.QuotaExceededException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.JsonUtil;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by andresgomez on 12/1/15.
 */
public class VirusTotalLoader extends AbstractFileDroppingLoader {
    ObjectMapper mapper;
    VirustotalPublicV2 virusTotalRef;
    JsonUtil jsonUtil = new JsonUtil();


    public VirusTotalLoader(String apiKey) {
        super();
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);
        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    public VirusTotalLoader(String apiKey, String timeoutMS) {
        super(timeoutMS);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);
        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    public VirusTotalLoader(String apiKey, String timeoutMS, String useDevShm) {
        super(timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);
        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {

        if (isNeedToAnalize(key.toString())) {

            Map<String, Object> data = new HashMap<>();

            MessageDigest md = null;
            try {
                md = MessageDigest.getInstance("SHA-256");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
            }

            InputStream file = new FileInputStream(binaryFile);

            md.update(IOUtils.toByteArray(file)); // Change this to "UTF-16" if needed
            byte[] digest = md.digest();

            String sha256 = "";
            for (byte b : digest) {
                sha256 += String.format("%02x", b);
            }

            FileScanReport report = null;

            try {
                report = virusTotalRef.getScanReport(sha256);
            } catch (UnauthorizedAccessException e) {
                e.printStackTrace();
            } catch (QuotaExceededException e) {
                e.printStackTrace();
                System.out.println("Exceeded maximum number of requests per minute");
                getProtoTuple().clear();
            }


            Integer positives = report.getPositives();
            if (positives == null)
                positives = 0;

            data.put("engines_positives", positives);
            data.put("engines_totals", report.getTotal());
            String scan_date = report.getScanDate();

            if (scan_date != null)
                data.put("scan_date", scan_date);

            Map<String, VirusScanInfo> scans = report.getScans();

            if (positives > 0) {
                for (String scanKey : scans.keySet()) {
                    VirusScanInfo virusInfo = scans.get(scanKey);
                    if (virusInfo.getResult() != null) {
                        data.put("malware", virusInfo.getResult());
                        data.put("md5", key.toString());
                        data.put("engine", scanKey);
                        data.put("engine_version", virusInfo.getVersion());
                        data.put("toAnalize", false);
                        break;
                    }
                }

            } else {
                data.put("malware", "clean");
                data.put("md5", key.toString());
                data.put("toAnalize", true);
            }

            getProtoTuple().clear();
            addMalwareCache(key.toString(), data);
            getProtoTuple().add(data);
        } else {
            getProtoTuple().clear();
        }

        return getTupleFactory().newTuple(getProtoTuple());
    }
}
