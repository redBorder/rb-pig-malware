package net.redborder.malware.loaders.virustotal;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.VirusScanInfo;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.QuotaExceededException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.JsonUtil;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by andresgomez on 12/1/15.
 */
public class VirusTotalLoader extends AbstractFileDroppingLoader {
    ObjectMapper mapper;
    VirustotalPublicV2 virusTotalRef;

    public VirusTotalLoader(String zkHost, String apiKey) {
        super(zkHost);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);
        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    public VirusTotalLoader(String zkHost, String apiKey, String timeoutMS) {
        super(zkHost, timeoutMS);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);
        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    public VirusTotalLoader(String zkHost, String apiKey, String timeoutMS, String useDevShm) {
        super(zkHost, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);
        try {
            virusTotalRef = new VirustotalPublicV2Impl();
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {


        if (isNeedToAnalize(key.toString())) {

            Map<String, Object> data = new HashMap<>();
            FileScanReport report = null;
            String hostname = "";

            try {
                hostname = InetAddress.getLocalHost().getHostName();
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            try {
                report = virusTotalRef.getScanReport(key.toString());
            } catch (UnauthorizedAccessException e) {
                e.printStackTrace();
            } catch (QuotaExceededException e) {
                e.printStackTrace();
                System.out.println("Exceeded maximum number of requests per minute");
                getProtoTuple().clear();
                data.put("sensor_name", hostname);
                data.put("timestamp", System.currentTimeMillis() / 1000);
                data.put("sha256", key.toString());
                data.put("type", "virustotal");
                data.put("malware_name", "clean");
                data.put("cuckoo_before", isCuckooBefore(key.toString()));
                data.put("score", 0);
                getProtoTuple().add(data);
                addMalwareCache(key.toString(), data);
                return getTupleFactory().newTuple(getProtoTuple());
            }

            if (report != null) {

                data.put("sensor_name", hostname);
                data.put("timestamp", System.currentTimeMillis() / 1000);
                data.put("sha256", key.toString());
                data.put("type", "virustotal");
                data.put("cuckoo_before", isCuckooBefore(key.toString()));

                Integer positives = report.getPositives();
                if (positives == null)
                    positives = 0;

/*
                data.put("engines_positives", positives);
                data.put("engines_totals", report.getTotal());

                String scan_date = report.getScanDate();

                if (scan_date != null)
                    data.put("scan_date", scan_date);
*/
                Map<String, VirusScanInfo> scans = report.getScans();

                if (positives > 0) {
                    for (String scanKey : scans.keySet()) {
                        VirusScanInfo virusInfo = scans.get(scanKey);
                        if (virusInfo.getResult() != null) {
                            data.put("malware_name", virusInfo.getResult());
                            //data.put("engine", scanKey);
                            data.put("type", "virustotal");
                            //data.put("engine_version", virusInfo.getVersion());
                            data.put("score", 100);
                            break;
                        }
                    }

                } else {
                    data.put("malware_name", "clean");
                    data.put("sha256", key.toString());
                    data.put("score", 0);
                }

            } else {
                getProtoTuple().clear();

                data.put("malware_name", "clean");
                data.put("sha256", key.toString());
                data.put("score", 0);
            }

            getProtoTuple().clear();
            getProtoTuple().add(data);
            addMalwareCache(key.toString(), data);
        } else{
            getProtoTuple().clear();
        }

        return getTupleFactory().newTuple(getProtoTuple());
    }
}
