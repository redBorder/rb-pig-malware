package net.redborder.malware.loaders.virustotal;

import com.kanishka.virustotal.dto.FileScanReport;
import com.kanishka.virustotal.dto.ScanInfo;
import com.kanishka.virustotal.dto.VirusScanInfo;
import com.kanishka.virustotal.exception.APIKeyNotFoundException;
import com.kanishka.virustotal.exception.QuotaExceededException;
import com.kanishka.virustotal.exception.UnauthorizedAccessException;
import com.kanishka.virustotalv2.VirusTotalConfig;
import com.kanishka.virustotalv2.VirustotalPublicV2;
import com.kanishka.virustotalv2.VirustotalPublicV2Impl;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.ConfigFile;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by andresgomez on 12/1/15.
 */
public class VirusTotalLoader extends AbstractFileDroppingLoader {
    ObjectMapper mapper;
    VirustotalPublicV2 virusTotalRef;
    public final String scoreName = "fb_virustotal";

    String host;
    int port;
    InetSocketAddress proxy;
    public VirusTotalLoader(String zkHost, String apiKey) {
        super(zkHost);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);

        try {
            ConfigFile.init();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        if(ConfigFile.getInstance().getFromGeneral("proxy_ip") != null && ConfigFile.getInstance().getFromGeneral("proxy_port") != null) {
            host = ConfigFile.getInstance().getFromGeneral("proxy_ip");
            port  =  ConfigFile.getInstance().getFromGeneral("proxy_port");
            proxy = new InetSocketAddress(host, port);
        }else{
            proxy = null;
        }
        try {

            virusTotalRef = new VirustotalPublicV2Impl(proxy);
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    public VirusTotalLoader(String zkHost, String apiKey, String timeoutMS) {
        super(zkHost, timeoutMS);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);

        try {
            ConfigFile.init();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        if(ConfigFile.getInstance().getFromGeneral("proxy_ip") != null && ConfigFile.getInstance().getFromGeneral("proxy_port") != null) {
            host = ConfigFile.getInstance().getFromGeneral("proxy_ip");
            port  =  ConfigFile.getInstance().getFromGeneral("proxy_port");
            proxy = new InetSocketAddress(host, port);
        }else{
            proxy = null;
        }
        try {

            virusTotalRef = new VirustotalPublicV2Impl(proxy);
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    public VirusTotalLoader(String zkHost, String apiKey, String timeoutMS, String useDevShm) {
        super(zkHost, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        VirusTotalConfig.getConfigInstance().setVirusTotalAPIKey(apiKey);

        try {
            ConfigFile.init();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        if(ConfigFile.getInstance().getFromGeneral("proxy_ip") != null && ConfigFile.getInstance().getFromGeneral("proxy_port") != null) {
            host = ConfigFile.getInstance().getFromGeneral("proxy_ip");
            port  =  ConfigFile.getInstance().getFromGeneral("proxy_port");
            proxy = new InetSocketAddress(host, port);
        }else{
            proxy = null;
        }
        try {

            virusTotalRef = new VirustotalPublicV2Impl(proxy);
        } catch (APIKeyNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {
        String hash = key.toString();
        Map<String, Object> data = new HashMap<>();

        try {
            FileScanReport report = virusTotalRef.getScanReport(hash);

            if (report.getTotal() != null) {
                data.put("md5", report.getMd5());
                data.put("sha1", report.getSha1());
                data.put("vt_link", report.getPermalink());
                data.put("vt_scan_date", report.getScanDate());
                data.put("vt_scan_id", report.getScanId());
                data.put("engines_positive", report.getPositives());
                data.put("engines_total", report.getTotal());
                data.put("msg", report.getVerboseMessage());

                if (report.getPositives().equals(0)) {
                    data.put("malware", "N/A");
                }

                Long score = (long) (report.getPositives() * 100 / report.getTotal())  ;
                data.put("score", score);

                Map<String, VirusScanInfo> scans = report.getScans();
                List<Map<String, Object>> engines = new ArrayList<>();

                if (scans != null) {
                    for (String engineName : scans.keySet()) {
                        Map<String, Object> engine = new HashMap<>();
                        VirusScanInfo virusInfo = scans.get(engineName);
                        String result = virusInfo.getResult() == null ? "N/A" : virusInfo.getResult();

                        engine.put("engine", engineName);
                        engine.put("result", result);
                        engine.put("version", virusInfo.getVersion());
                        engines.add(engine);
                    }
                }

                data.put("engines", engines);

            } else {
                ScanInfo scanInformation = virusTotalRef.scanFile(binaryFile);

                data.put("md5", scanInformation.getMd5());
                data.put("sha1", scanInformation.getSha1());
                data.put("vt_link", scanInformation.getPermalink());
                data.put("vt_scan_id", scanInformation.getScanId());
                data.put("msg", scanInformation.getVerboseMessage());
                data.put("malware", "N/A");
                data.put("score", -1L);
            }
        } catch (UnauthorizedAccessException e) {
            e.printStackTrace();
            data.put("msg", "Unauthorized access!");
            data.put("score", -1L);
            data.put("malware", "N/A");
        } catch (QuotaExceededException e) {
            if (!isAnalized(hash, scoreName)) {
                try {
                    ScanInfo scanInformation = virusTotalRef.scanFile(binaryFile);

                    data.put("md5", scanInformation.getMd5());
                    data.put("sha1", scanInformation.getSha1());
                    data.put("vt_link", scanInformation.getPermalink());
                    data.put("vt_scan_id", scanInformation.getScanId());
                    data.put("msg", scanInformation.getVerboseMessage());
                    data.put("malware", "N/A");
                    data.put("score", -1L);
                } catch (UnauthorizedAccessException e1) {
                    e1.printStackTrace();
                    data.put("msg", "Unauthorized access!");
                    data.put("score", -1L);
                    data.put("malware", "N/A");
                } catch (QuotaExceededException e1) {
                    e1.printStackTrace();
                    data.put("msg", "Signature scan limit reached, try again later");
                    data.put("score", -1L);
                    data.put("malware", "N/A");
                }
            } else {
                data.put("msg", "Signature lookup limit reached, try again later");
                data.put("score", -1L);
                data.put("malware", "N/A");
            }
        }


        try {
            String hostname = InetAddress.getLocalHost().getHostName();
            data.put("sensor_name", hostname);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        data.put("loader", "virustotal");
        data.put("timestamp", System.currentTimeMillis() / 1000);

        Double weight = getWeight(scoreName);
        if(weight != null){
            data.put("weight", weight);
        }

        String jsonData = mapper.writeValueAsString(data);

        Long score = (Long) data.get("score");
        updateMalwareScore(hash, scoreName, score, LoaderType.FAST);

        getProtoTuple().clear();
        getProtoTuple().add(hash);
        getProtoTuple().add(jsonData);

        return getTupleFactory().newTuple(getProtoTuple());
    }
}
