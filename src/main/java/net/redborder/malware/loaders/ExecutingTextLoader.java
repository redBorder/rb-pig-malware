/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * <p/>
 * Copyright 2013 Endgame Inc.
 */


package net.redborder.malware.loaders;

import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.util.hash.Hash;
import org.apache.pig.data.Tuple;

import java.util.HashMap;
import java.util.Map;

public class ExecutingTextLoader extends AbstractExecutingLoader {
    public ExecutingTextLoader(String zkHost, String script) {
        super(zkHost, script);
    }

    public ExecutingTextLoader(String zkHost, String script, String timeoutMS) {
        super(zkHost, script, timeoutMS);
    }

    public ExecutingTextLoader(String zkHost, String script, String timeoutMS, String useDevShm) {
        super(zkHost, script, timeoutMS, useDevShm);
    }

    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {
        protoTuple.clear();

        Map<String, Object> data = new HashMap<>();

        data.put("sha256", key.toString());
        data.put("malware", output);
        data.put("cuckoo_before", isCuckooBefore(key.toString()));

        if (output.equals("")) {
            data.put("score", 0);
        } else {
            data.put("score", 100);
        }
        data.put("timestamp", System.currentTimeMillis() / 1000);

        Long score = getScore(key.toString());
        Integer currentScore = (Integer) data.get("score");

        if (score == null || score.intValue() != currentScore) {
            getProtoTuple().add(data);
        }

        addMalwareCache(key.toString(), data);

        return tupleFactory.newTuple(protoTuple);
    }
}
