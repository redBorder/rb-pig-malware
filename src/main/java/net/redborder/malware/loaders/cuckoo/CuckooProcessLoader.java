package net.redborder.malware.loaders.cuckoo;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.loaders.WholeFileInputFormat;
import net.redborder.malware.loaders.WholeFileRecordReader;
import net.redborder.malware.util.aerospike.AeroSpikeManager;
import net.redborder.malware.util.kafka.KafkaManager;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.mapreduce.*;
import org.apache.pig.FileInputLoadFunc;
import org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit;
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;
import org.ho.yaml.Yaml;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class CuckooProcessLoader extends FileInputLoadFunc {

    WholeFileRecordReader reader;
    ObjectMapper mapper;
    BytesWritable value;
    private KafkaManager kafkaManager;
    private AeroSpikeManager aeroSpikeManager;
    TupleFactory tupleFactory = TupleFactory.getInstance();
    ArrayList<Object> protoTuple = new ArrayList<>();
    String zkHost;
    final String CUCKOO_WEIGHT_FILE = "cuckoo_weight.yml";

    public CuckooProcessLoader() {
        this("localhost:2181");
    }

    public CuckooProcessLoader(String zkHost) {
        this.zkHost = zkHost;
    }

    public void init() throws IOException {
        aeroSpikeManager = AeroSpikeManager.getInstance();
        kafkaManager = KafkaManager.getInstance(zkHost);

    }

    @Override
    public void setLocation(String s, Job job) throws IOException {
        WholeFileInputFormat.setInputPaths(job, s);
    }

    @Override
    public InputFormat getInputFormat() throws IOException {
        return new WholeFileInputFormat();
    }

    @Override
    public void prepareToRead(RecordReader recordReader, PigSplit split) throws IOException {
        this.reader = (WholeFileRecordReader) recordReader;
        init();
    }

    boolean shouldContinue() throws IOException {
        //Determine if there is another key/value
        try {
            return reader.nextKeyValue();
        } catch (InterruptedException e) {
            throw new IOException(e);
        }
    }

    @Override
    public Tuple getNext() throws IOException {

        if (!shouldContinue()) {
            return null;
        }
        try {
            value = reader.getCurrentValue();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String json = new String(value.getBytes());
        mapper = new ObjectMapper();
        Map<String, Object> jsonMap = mapper.readValue(json, Map.class);
        String hash = ((Map) ((Map) jsonMap.get("target")).get("file")).get("sha256").toString();
        Map<String, Long> scores;
        scores = processScore((List<Map<String, Object>>) jsonMap.get("signatures"));
        updateMalwareScore(hash, "sb_cuckoo", scores.get("score"), AbstractFileDroppingLoader.LoaderType.SLOW);
        protoTuple.clear();
        protoTuple.add(hash);
        protoTuple.add(mapper.writeValueAsString(scores));
        return tupleFactory.newTuple(protoTuple);

    }

    public void sendKafka(String topic, Object msg) {
        if (msg instanceof Map) {
            try {
                String send = mapper.writeValueAsString(msg);
                kafkaManager.send(topic, send);
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        } else if (msg instanceof String) {
            kafkaManager.send(topic, msg);
        }
    }

    public void updateMalwareScore(String hash, String scoreName, Long score, AbstractFileDroppingLoader.LoaderType loaderType) {
        Map<String, Object> malwareScores = aeroSpikeManager.updateMalwareScore(hash, scoreName, score, loaderType);
        malwareScores.put("sha256", hash);
        malwareScores.put("timestamp", System.currentTimeMillis() / 1000);
        sendKafka("rb_malware", malwareScores);
    }

    public Map<String, Long> processScore(List<Map<String, Object>> signaturesMap) {

        Map<String, Long> scores = new HashMap<>();
        Map<String, Map<String, Object>> cuckooConfig = loadCuckooConfig();


        if (signaturesMap == null){

            long lowCount = 0;
            long mediumCount = 0;
            long highCount = 0;

            scores.put("highScore",0L);
            scores.put("mediumScore",0L);
            scores.put("lowScore",0L);
            scores.put("highCount", highCount);
            scores.put("mediumCount", mediumCount);
            scores.put("lowCount", lowCount);

        }else {

            long lowCount = 0;
            long mediumCount = 0;
            long highCount = 0;


            for (Map map : signaturesMap) {
                Integer severity = (Integer) map.get("severity");
                if (severity == 1) {
                    lowCount++;
                } else if (severity == 2) {
                    mediumCount++;
                } else if (severity == 3) {
                    highCount++;
                }
            }


            scores.put("highScore", 0L);
            scores.put("mediumScore", 0L);
            scores.put("lowScore", 0L);
            scores.put("highCount", highCount);
            scores.put("mediumCount", mediumCount);
            scores.put("lowCount", lowCount);

            if (highCount > 0) {
                scores.put("highCount", highCount);
                Map<String, Object> configMap;
                configMap = cuckooConfig.get("high");
                if (highCount >= (Integer) configMap.get("high_lower_threshold")) {
                    scores.put("highScore", ((Integer) configMap.get("high_score")).longValue());
                } else if (highCount <= (Integer) configMap.get("low_upper_threshold")) {
                    scores.put("highScore", ((Integer) configMap.get("low_score")).longValue());
                } else {
                    scores.put("highScore", ((Integer) configMap.get("medium_score")).longValue());
                }
            }

            if (mediumCount > 0) {
                scores.put("mediumCount", mediumCount);
                Map<String, Object> configMap;
                configMap = cuckooConfig.get("medium");
                if (mediumCount >= (Integer) configMap.get("high_lower_threshold")) {
                    scores.put("mediumScore", ((Integer) configMap.get("high_score")).longValue());
                } else if (mediumCount <= (Integer) configMap.get("low_upper_threshold")) {
                    scores.put("mediumScore", ((Integer) configMap.get("low_score")).longValue());
                } else {
                    scores.put("mediumScore", ((Integer) configMap.get("medium_score")).longValue());
                }
            }
            if (lowCount > 0) {
                scores.put("lowCount", lowCount);
                Map<String, Object> configMap;
                configMap = cuckooConfig.get("low");
                if (lowCount >= (Integer) configMap.get("high_lower_threshold")) {
                    scores.put("lowScore", ((Integer) configMap.get("high_score")).longValue());
                } else if (lowCount <= (Integer) configMap.get("low_upper_threshold")) {
                    scores.put("lowScore", ((Integer) configMap.get("low_score")).longValue());
                } else {
                    scores.put("lowScore", ((Integer) configMap.get("medium_score")).longValue());
                }
            }
        }

        Map<String,Object> configMap;
        configMap = cuckooConfig.get("general");
        long globalScore = (long)(((Double)configMap.get("high"))*(Long)scores.get("highScore")+((Double)configMap.get("medium"))*(Long)scores.get("mediumScore")+((Double)configMap.get("low"))*(Long)scores.get("lowScore"));
        scores.put("score",globalScore);
        return scores;
    }


    private Map<String, Map<String,Object>> loadCuckooConfig() {
        Map<String, Object> map = null;
        Map<String, Map<String, Object>> mapAll = new HashMap<>();
        try {
            map = (Map<String, Object>) Yaml.load(new File(CUCKOO_WEIGHT_FILE));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        Map<String, Object> general = (Map<String, Object>) map.get("general");
        Map<String, Object> high = (Map<String, Object>) map.get("high");
        Map<String, Object> medium = (Map<String, Object>) map.get("medium");
        Map<String, Object> low = (Map<String, Object>) map.get("low");
        mapAll.put("general", general);
        mapAll.put("high", high);
        mapAll.put("medium", medium);
        mapAll.put("low", low);
        return mapAll;
    }
}
