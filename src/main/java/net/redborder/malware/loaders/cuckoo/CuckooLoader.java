package net.redborder.malware.loaders.cuckoo;

import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by andresgomez on 26/1/15.
 */
public class CuckooLoader extends AbstractFileDroppingLoader {

    String urlToConnect = " http://10.0.150.14:8090/tasks/create/file";
    ObjectMapper mapper;
    Integer MAX_RETRIES = 5;

    public CuckooLoader(String timeout, String useDevShm) {
        this("5", timeout, useDevShm);
    }

    public CuckooLoader(String maxretries, String timeout, String useDevShm) {
        super(timeout, useDevShm);
        MAX_RETRIES = Integer.valueOf(maxretries);
        mapper = new ObjectMapper();
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {

        if (checkToAnalize(key.toString())) {
            String boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value.

            boolean next = true;
            int times = 0;

            URLConnection connection = new URL(urlToConnect).openConnection();
            connection.setDoOutput(true); // This sets request method to POST.
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);

            while (next) {
                PrintWriter writer = null;
                try {
                    writer = new PrintWriter(new OutputStreamWriter(connection.getOutputStream(), "UTF-8"));

                    writer.println("--" + boundary);
                    writer.println("Content-Disposition: form-data; name=\"paramToSend\"");
                    writer.println("Content-Type: text/plain; charset=UTF-8");
                    writer.println();

                    writer.println("--" + boundary);
                    writer.println("Content-Disposition: form-data; name=\"file\"; filename=\"" + binaryFile.getName() + "\"");
                    writer.println("Content-Type: text/plain; charset=UTF-8");
                    writer.println();
                    BufferedReader reader = null;
                    try {
                        reader = new BufferedReader(new InputStreamReader(new FileInputStream(binaryFile.getPath()), "UTF-8"));
                        for (String line; (line = reader.readLine()) != null; ) {
                            writer.println(line);
                        }
                    } finally {
                        if (reader != null) try {
                            reader.close();
                        } catch (IOException logOrIgnore) {
                        }
                    }

                    writer.println("--" + boundary + "--");
                } finally {
                    if (writer != null) writer.close();
                }

                if (((HttpURLConnection) connection).getResponseCode() == 200) {
                    next = false;
                } else {
                    if (times > MAX_RETRIES) {
                        next = false;
                    } else {
                        times++;
                    }
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(connection.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            ((HttpURLConnection) connection).disconnect();

            Map<String, Object> status = (Map<String, Object>) mapper.readValue(response.toString(), Map.class);

            Map<String, Object> data = new HashMap<>();
            data.put("MD5", key.toString());
            data.put("status", "Cuckoo-TaskID:" + status.get("task_id"));

            addMd5Clean(key.toString());

            getProtoTuple().clear();
            getProtoTuple().add(data);
            return getTupleFactory().newTuple(getProtoTuple());
        } else {
            getProtoTuple().clear();
            return getTupleFactory().newTuple(getProtoTuple());
        }
    }
}
