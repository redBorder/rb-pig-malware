package net.redborder.malware.loaders.cuckoo;

import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.MultipartUtility;
import net.redborder.malware.util.aerospike.AeroSpikeManager;
import net.redborder.malware.util.logger.RbLogger;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.*;
import java.net.*;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

/**
 * Created by andresgomez on 26/1/15.
 */
public class CuckooLoader extends AbstractFileDroppingLoader {

    String CuckooToConnect = " http://127.0.0.1:8090/tasks/create/file";
    String urlToConnect;
    ObjectMapper mapper;
    Integer MAX_RETRIES = 5;
    Logger log;
    String[] cuckoo_instances;
    String[] cuckoo_filters;
    String scoreName = "sb_cuckoo";

    public CuckooLoader(String url, String instances,String filters, String zkHost, String timeout, String useDevShm) {
        this(url, instances, filters, zkHost, "5", timeout, useDevShm);
    }

    public CuckooLoader(String url, String instances,String filters, String zkHost, String maxRetries, String timeout, String useDevShm) {
        super(zkHost, timeout, useDevShm);
        MAX_RETRIES = Integer.valueOf(maxRetries);
        mapper = new ObjectMapper();
        log = RbLogger.getLogger(CuckooLoader.class.getName());
        cuckoo_instances = instances.split(",");
        cuckoo_filters = filters.replace(" ","").split(",");
        CuckooToConnect = url;
        ObjectMapper mapper;
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {

        List<String> response;
        String fileType = Files.probeContentType(binaryFile.toPath());
        boolean shaFilter = false;


            for (String filter : cuckoo_filters) {
                if(!filter.equals("") && !filter.equals("none")) {
                    System.out.println("Filter: " + filter);
                    if (fileType != null && fileType.contains(filter)) {
                        shaFilter = true;
                    }
                }
            }

        if (!isCuckooBefore(key.toString()) && !shaFilter) {
            for (String instance_tosend : cuckoo_instances) {
                System.out.println("Analyzing: " + key);
                urlToConnect = "http://" + CuckooToConnect + ":8090/tasks/create/file";

                boolean next = true;
                int times = 0;
                StringBuffer result = new StringBuffer();
                while (next && times < 5) {
                    try {
                        MultipartUtility multipart = new MultipartUtility(urlToConnect, "UTF-8");

                        multipart.addHeaderField("User-Agent", "CodeJava");
                        multipart.addHeaderField("Test-Header", "Header-Value");
                        multipart.addFormField("machine", instance_tosend);

                        multipart.addFilePart("file", binaryFile);
                        response = multipart.finish();

                        System.out.println("Server replied:");

                        for (String line : response) {
                            result.append(line);
                        }
                        next = false;
                    } catch (IOException ex) {
                        times ++;
                        System.err.println(ex);
                    }

                }

                Map<String, Object> status = (Map<String, Object>) mapper.readValue(result.toString(), Map.class);

                String hostname = "";

                try {
                    hostname = InetAddress.getLocalHost().getHostName();
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                }

                Map<String, Object> data = new HashMap<>();
                String id = String.valueOf(status.get("task_id"));

                if (id != null) {
                    data.put("task_id", status.get("task_id"));
                    data.put("score", 0);
                    data.put("timestamp", System.currentTimeMillis() / 1000);
                    data.put("type", "cuckoo");
                    data.put("sensor_name", hostname);

                    Map<String, Object> toCache = new HashMap<>();
                    toCache.put("cuckoo_before", 1);
                    toCache.putAll(data);

                    getProtoTuple().clear();
                    String data_string = mapper.writeValueAsString(data);

                    getProtoTuple().add(key.toString());
                    getProtoTuple().add(data_string);

                    updateMalwareScore(key.toString(), scoreName, 0L , LoaderType.SLOW);
                } else {
                    System.out.println(status);
                }
            }
        } else {
            getProtoTuple().clear();
        }
        return getTupleFactory().newTuple(getProtoTuple());
    }

    public boolean isCuckooBefore(String sha256){
        boolean before = true;
        AeroSpikeManager aerospike = AeroSpikeManager.getInstance();
        Map<String, Object> sha_info =   aerospike.getHash(sha256);
        if (sha_info.get("sb_cuckoo") == null || (Integer)sha_info.get("sb_cuckoo") == -1){
            before = false;
        }
        return before;
    }

}
