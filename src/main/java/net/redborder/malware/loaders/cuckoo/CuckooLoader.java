package net.redborder.malware.loaders.cuckoo;

import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.MultipartUtility;
import net.redborder.malware.util.logger.RbLogger;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.*;
import java.net.*;
import java.nio.Buffer;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

/**
 * Created by andresgomez on 26/1/15.
 */
public class CuckooLoader extends AbstractFileDroppingLoader {

    String CuckooToConnect = " http://127.0.0.1:8090/tasks/create/file";
    String urlToConnect;
    ObjectMapper mapper;
    Integer MAX_RETRIES = 5;
    Logger log;
    String[] cuckoo_instances;

    public CuckooLoader(String url, String instances, String zkHost, String timeout, String useDevShm) {
        this(url, instances, zkHost, "5", timeout, useDevShm);
    }

    public CuckooLoader(String url, String instances, String zkHost, String maxRetries, String timeout, String useDevShm) {
        super(zkHost, timeout, useDevShm);
        MAX_RETRIES = Integer.valueOf(maxRetries);
        mapper = new ObjectMapper();
        log = RbLogger.getLogger(CuckooLoader.class.getName());
        cuckoo_instances = instances.split(",");
        CuckooToConnect = url;
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {

        List<String> response = null;
        String fileType = Files.probeContentType(binaryFile.toPath());
        boolean isImageorAudio = false;
        if (fileType != null && (fileType.contains("image") || fileType.contains("audio"))) {
            isImageorAudio = true;
        }

        if (isNeedToAnalize(key.toString()) && isCuckooBefore(key.toString()) == 0 && !isImageorAudio) {
            for (String instance_tosend : cuckoo_instances) {
                System.out.println("La key es: " + key);
                System.out.println("SHA256: " + DigestUtils.sha256Hex(new FileInputStream(binaryFile.getPath())));
                urlToConnect = "http://" + CuckooToConnect + ":8090/tasks/create/file";
                File file = new File("/tmp/filename");
                if (file.exists()) {
                    file.delete();
                }

                Files.copy(binaryFile.toPath(), file.toPath());
                boolean next = true;
                int times = 0;
                StringBuffer result = new StringBuffer();
                while (next && times < 5) {
                    try {
                        MultipartUtility multipart = new MultipartUtility(urlToConnect, "UTF-8");

                        multipart.addHeaderField("User-Agent", "CodeJava");
                        multipart.addHeaderField("Test-Header", "Header-Value");
                        multipart.addFormField("machine", instance_tosend);

                        multipart.addFilePart("file", binaryFile);
                        response = multipart.finish();

                        System.out.println("Server replied:");

                        for (String line : response) {
                            result.append(line);
                        }
                        next = false;
                    } catch (IOException ex) {
                        times ++;
                        System.err.println(ex);
                    }

                }

                Map<String, Object> status = (Map<String, Object>) mapper.readValue(result.toString(), Map.class);

                String hostname = "";

                try {
                    hostname = InetAddress.getLocalHost().getHostName();
                } catch (UnknownHostException e) {
                    e.printStackTrace();
                }

                Map<String, Object> data = new HashMap<>();
                String id = String.valueOf(status.get("task_id"));

                if (id != null) {
                    data.put("sha256", key.toString());
                    data.put("malware_name", "Cuckoo-TaskID:" + status.get("task_id"));
                    data.put("score", 0);
                    data.put("timestamp", System.currentTimeMillis() / 1000);
                    data.put("type", "cuckoo");
                    data.put("sensor_name", hostname);

                    Map<String, Object> toCache = new HashMap<>();
                    toCache.put("cuckoo_before", 1);
                    toCache.putAll(data);

                    getProtoTuple().clear();
                    getProtoTuple().add(data);
                    addMalwareCache(key.toString(), toCache);
                } else {
                    System.out.println(status);
                }
            }
        } else {
            getProtoTuple().clear();
        }
        return getTupleFactory().newTuple(getProtoTuple());
    }

}
