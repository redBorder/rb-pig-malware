package net.redborder.malware.loaders.cuckoo;

import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.logger.RbLogger;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;


public class CuckooLoader extends AbstractFileDroppingLoader {

    String CuckooToConnect = " http://127.0.0.1:8090/tasks/create/file";
    String urlToConnect;
    ObjectMapper mapper;
    Integer MAX_RETRIES = 5;
    Logger log;
    String[] cuckoo_filters;
    String scoreName = "sb_cuckoo";
    HttpClient client;

    public CuckooLoader(String url, String filters, String zkHost, String timeout, String useDevShm) {
        this(url, filters, zkHost, "5", timeout, useDevShm);
    }

    public CuckooLoader(String url, String filters, String zkHost, String maxRetries, String timeout, String useDevShm) {
        super(zkHost, timeout, useDevShm);
        MAX_RETRIES = Integer.valueOf(maxRetries);
        mapper = new ObjectMapper();
        log = RbLogger.getLogger(CuckooLoader.class.getName());
        cuckoo_filters = filters.replace(" ", "").split(",");
        CuckooToConnect = url;
        client = new DefaultHttpClient();
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {

        String fileType = Files.probeContentType(binaryFile.toPath());
        boolean shaFilter = false;

        for (String filter : cuckoo_filters) {
            if (!filter.equals("") && !filter.equals("none")) {
                System.out.print("Filter: " + filter);
                if (fileType != null && fileType.contains(filter)) {
                    shaFilter = true;
                }
            }
        }

        if (!aeroSpikeManager.checkControlFilesStatus(key.toString(), "cuckoo_before") && !shaFilter) {
            System.out.println("  Analyzing: " + key);
            urlToConnect = "http://" + CuckooToConnect + ":8090/tasks/create/file";

            HttpPost httppost = new HttpPost(urlToConnect);
            FileBody bin = new FileBody(binaryFile);
            MultipartEntity reqEntity = new MultipartEntity();
            reqEntity.addPart("file", bin);
            httppost.setEntity(reqEntity);

            HttpResponse response = client.execute(httppost);
            String result = IOUtils.toString(response.getEntity().getContent(), "UTF-8");

            System.out.println("RESULT: " + result);
            Map<String, Object> data = new HashMap<>();

            if (result != null) {
                Map<String, Object> status = (Map<String, Object>) mapper.readValue(result, Map.class);

                String id = String.valueOf(status.get("task_id"));

                if (id != null) {
                    data.put("task_id", status.get("task_id"));
                    data.put("score", -1);
                    data.put("timestamp", System.currentTimeMillis() / 1000);
                    data.put("type", "cuckoo");

                    Map<String, Object> toCache = new HashMap<>();
                    toCache.put("cuckoo_before", 1);
                    toCache.putAll(data);
                } else {
                    System.out.println(status);
                }
            } else {
                data.put("score", -1);
                data.put("timestamp", System.currentTimeMillis() / 1000);
                data.put("type", "cuckoo");
                data.put("message", "Null result trying query the url [" + urlToConnect + "]");
                System.out.println("Null result trying query the url [" + urlToConnect + "]");
            }

            try {
                String hostname = InetAddress.getLocalHost().getHostName();
                data.put("sensor_name", hostname);
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            String data_string = mapper.writeValueAsString(data);

            getProtoTuple().clear();
            getProtoTuple().add(key.toString());
            getProtoTuple().add(data_string);

            aeroSpikeManager.setControlFile(key.toString(), "cuckoo_before", 1L);
        } else {
            getProtoTuple().clear();
        }


        return getTupleFactory().newTuple(getProtoTuple());
    }
}
