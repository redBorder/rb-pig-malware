/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *  Copyright 2013 Endgame Inc.
 *
 */


package net.redborder.malware.loaders.yara;


import net.redborder.malware.loaders.ExecutingJsonLoader;
import org.codehaus.jackson.map.ObjectMapper;
import org.ho.yaml.Yaml;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

public class YaraLoader extends ExecutingJsonLoader {

    private final String YARA_WEIGHTS = "yara_weights.yml";

    private final String HIGH_SEVERITY   = "high";
    private final String MEDIUM_SEVERITY = "medium";
    private final String LOW_SEVERITY    = "low";

    private Map<String, Object> rawWeights;
    private Map<String, Map<String, Object>> weights;

	public YaraLoader(String zkHosts){
		super(zkHosts, "scripts/pyyara.py", "yara");
        loadYaraConfig();
	}
	
	public YaraLoader(String zkHosts, String timeoutMS){
		super(zkHosts, "scripts/pyyara.py", timeoutMS, "yara");
        loadYaraConfig();
	}
	
	public YaraLoader(String zkHosts, String timeoutMS, String useDevShm){
		super(zkHosts, "scripts/pyyara.py", timeoutMS, useDevShm, "yara");
        loadYaraConfig();
	}

	public Map<String, Object> process(String input){
		ObjectMapper mapper = new ObjectMapper();
		Map<String, Object> data = new HashMap<>();

		data.put("loader", "yara");

		if (input.equals("")) {
			data.put("score", -1L);
			data.put("malware", "N/A");

		} else {
			Map<String, Object> msg = new HashMap<>();

			try {
				msg = mapper.readValue(input, Map.class);
			} catch (IOException e) {
				e.printStackTrace();
			}

			List<Map<String, Object>> matches = (ArrayList) msg.get("matches");
			if (matches != null && matches.size() > 0) {
				data.put("yara_rules", matches);
                data.put("score", calculateScore(matches) );
			} else {
				data.put("score", 0L);
				data.put("malware", "N/A");
			}
		}

		return data;
	}

    private void loadYaraConfig(){
        try {
            weights = (Map<String, Map<String, Object>>) Yaml.load(new File(YARA_WEIGHTS));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private long calculateScore(List<Map<String, Object>> matches){

        Double finalScore = 0.0;

        Map<String, Integer> hits = new HashMap<>();
        Map<String, Integer> scores = new HashMap<>();

        List <String> severities = new ArrayList<>(Arrays.asList(HIGH_SEVERITY, MEDIUM_SEVERITY, LOW_SEVERITY));
        for (String severity : severities){
            hits.put(severity, 0);
            scores.put(severity, 0);
        }

        // Count hits for the matches
        for (Map<String, Object> match : matches){

            Map<String, Object> meta = (Map<String, Object>) match.get("meta");
            String severity = (String) meta.get("severity");

            // Update hits
            if (severity != null) {
                if (severity.equalsIgnoreCase(HIGH_SEVERITY)) {
                    hits.put(HIGH_SEVERITY, hits.get(HIGH_SEVERITY) + 1 );
                } else if (severity.equalsIgnoreCase(MEDIUM_SEVERITY)) {
                    hits.put(MEDIUM_SEVERITY, hits.get(MEDIUM_SEVERITY) + 1 );
                } else if (severity.equalsIgnoreCase(LOW_SEVERITY)) {
                    hits.put(LOW_SEVERITY, hits.get(LOW_SEVERITY) + 1 );
                }
            }
        }

        if (!(hits.get(HIGH_SEVERITY) == 0 && hits.get(MEDIUM_SEVERITY) == 0 &&
                hits.get(LOW_SEVERITY) == 0)) {
            // No rules have matched, no need to compute anything

            for (String severity : severities) {

                if (hits.get(severity) > (Integer) weights.get(severity).get("high_lower_threshold")) {
                    // Hits exceed the high threshold
                    scores.put(severity, (Integer) weights.get(severity).get("high_score"));
                } else if (hits.get(severity) < (Integer) weights.get(severity).get("low_upper_threshold") &&
                        hits.get(severity) > 0) {
                    // Hits are below the low threshold and bigger than 0
                    scores.put(severity, (Integer) weights.get(severity).get("low_score"));
                } else if (hits.get(severity) > 0) {
                    // Hits are not 0 and in between the two thresholds
                    scores.put(severity, (Integer) weights.get(severity).get("medium_score"));
                }
            }

            // Calculate the final score
            for (String severity : severities) {
                Double weighing = (Double) weights.get("general").get(severity);
                Integer score = scores.get(severity);
                finalScore += weighing * score.doubleValue();
            }
        }

        return finalScore.longValue();
    }
}
