package net.redborder.malware.loaders.kaspersky;


import net.redborder.malware.loaders.AbstractExecutingLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;


public class KasperskyLoader extends AbstractExecutingLoader {

    String scoreName = "fb_kaspersky";
    ObjectMapper mapper;

    public KasperskyLoader(String zkHost) {
        this(zkHost, String.valueOf(Long.MAX_VALUE));
    }

    public KasperskyLoader(String zkHost, String timeoutMS) {
        this(zkHost, timeoutMS, "true");
    }

    public KasperskyLoader(String zkHost, String timeoutMS, String useDevShm) {
        super(zkHost, "scripts/kaspersky.sh", timeoutMS, useDevShm);
        mapper = new ObjectMapper();
    }

    @Override
    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {
        String hash = key.toString();
        Map<String, Object> data = new HashMap<>();
        LoaderType loaderType = LoaderType.FAST;

        data.put("loader", "kaspersky");

        String malware_name = output.replaceAll("\n", "");

        if (!malware_name.equals("")) {
            if (malware_name.equals("clean")) {
                data.put("score", 0L);
                data.put("malware", "N/A");
            } else {
                data.put("score", 100L);
                data.put("malware", malware_name);
            }
        } else {
            data.put("score", -1L);
            data.put("malware", "N/A");
        }

        data.put("timestamp", System.currentTimeMillis() / 1000);


        Double weight = getWeight(scoreName);
        if (weight != null) {
            data.put("weight", weight);
        }

        try {
            String hostname = InetAddress.getLocalHost().getHostName();
            data.put("sensor_name", hostname);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        String jsonData = "{}";
        try {
            jsonData = mapper.writeValueAsString(data);
        } catch (IOException e) {
            e.printStackTrace();
        }


        Long score = (Long) data.get("score");
        updateMalwareScore(hash, scoreName, score, loaderType);

        getProtoTuple().clear();
        getProtoTuple().add(hash);
        getProtoTuple().add(jsonData);

        return tupleFactory.newTuple(getProtoTuple());
    }
}