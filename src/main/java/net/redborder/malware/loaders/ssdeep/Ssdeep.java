package net.redborder.malware.loaders.ssdeep;

import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.ConfigFile;
import net.redborder.malware.util.aerospike.AeroSpikeManager;
import org.apache.commons.lang.StringUtils;
import org.apache.pig.EvalFunc;
import org.apache.pig.data.*;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.IOException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class Ssdeep extends EvalFunc<Tuple> {


    private String last_SHA256 = "";
    private Long cachedScore;
    private long MALWARE_THRESHOLD = -1L;
    private int SIMILARITY_THRESHOLD = -1;
    private boolean firstTime = true;
    private boolean matchFound;

    public Tuple exec(Tuple input) throws IOException {
        if (MALWARE_THRESHOLD == -1L || SIMILARITY_THRESHOLD == -1) {
            ConfigFile.init();
            MALWARE_THRESHOLD = ((Integer) ConfigFile.getInstance().getFromFuzzy("malware_threshold")).longValue();
            SIMILARITY_THRESHOLD = ConfigFile.getInstance().getFromFuzzy("similarity_threshold");
        }
        matchFound = false;
        int malware_timestamp = (int) input.get(0);
        String malware_SHA256 = (String) input.get(1);
        String malware_ssdeep = (String) input.get(2);
        String SHA256 = (String) input.get(4);
        String ssdeep = (String) input.get(5);
        List<Object> data = new ArrayList<>();
        Map<String, Object> map;

        Tuple tuple = null;

        if (!last_SHA256.equals(malware_SHA256)) {
            firstTime = true;
        }

        if (isMalware(malware_SHA256)) {

            Long score_compared;
            Long score_torefresh;
            ArrayList<Object> malware_protoTuple = new ArrayList<>();
            map = new HashMap<>();
            Map<String, Object> relations = new HashMap<>();
            int similarity;
            malware_protoTuple.add(malware_timestamp);
            malware_protoTuple.add(malware_SHA256);
            malware_protoTuple.add(malware_ssdeep);
            String hash2;
            hash2 = malware_ssdeep;

            int blockSize1 = Integer.parseInt(ssdeep.substring(0, ssdeep.indexOf(":")));
            int blockSize2 = Integer.parseInt(hash2.substring(0, hash2.indexOf(":")));
            String hashpart11 = ssdeep.substring(ssdeep.indexOf(":") + 1, ssdeep.indexOf(":", ssdeep.indexOf(":") + 1));
            String hashpart12 = ssdeep.substring(ssdeep.indexOf(":", ssdeep.indexOf(":") + 1) + 1);
            String hashpart21 = hash2.substring(hash2.indexOf(":") + 1, hash2.indexOf(":", hash2.indexOf(":") + 1));
            String hashpart22 = hash2.substring(hash2.indexOf(":", hash2.indexOf(":") + 1) + 1);

            FuzzyHash fh1 = new FuzzyHash(blockSize1, hashpart11, hashpart12);
            FuzzyHash fh2 = new FuzzyHash(blockSize2, hashpart21, hashpart22);

            similarity = Compare(fh1, fh2);


            if (similarity > SIMILARITY_THRESHOLD && !SHA256.equals(malware_SHA256)) {

                Map malware = AeroSpikeManager.getInstance().getHash(SHA256);

                if (malware != null) {
                    score_torefresh = (Long) malware.get("sb_fuzzy");
                    if (score_torefresh == null || score_torefresh == -1) {
                        score_torefresh = 0L;
                    }
                } else {
                    score_torefresh = 0L;
                }

                Map malware2 = AeroSpikeManager.getInstance().getHash(malware_SHA256);

                if (malware2 != null) {
                    score_compared = (Long) malware2.get("score");
                    if (score_compared == null || score_compared == -1) {
                        score_compared = 0L;
                    }
                } else {
                    score_compared = 0L;
                }


                if (score_torefresh < (score_compared * similarity / 100)) {
                    AeroSpikeManager.getInstance().updateMalwareHashScore(SHA256, "sb_fuzzy", score_compared * similarity / 100, AbstractFileDroppingLoader.LoaderType.SLOW);
                    relations.put(malware_SHA256, similarity);
                    relations.put("score", score_compared * similarity / 100);
                    matchFound = true;
                }


                Map<String, Object> relationsMap = new HashMap<>();
                relationsMap.put("similarity", relations);
                relationsMap.put("ssdeep", ssdeep);
                data.add(relationsMap);
                map.put("timestamp", System.currentTimeMillis() / 1000);
                map.put("sha256", SHA256);
                map.put("loader", "fuzzy");
                map.put("data", data);

                if (relations.isEmpty()) {
                    map.clear();
                    tuple = null;
                } else {
                    ObjectMapper mapper = new ObjectMapper();
                    String data_string = mapper.writeValueAsString(map);
                    malware_protoTuple.add(data_string);
                    malware_protoTuple.add(SHA256);
                    tuple = TupleFactory.getInstance().newTuple(malware_protoTuple);
                }
            } else {
                AeroSpikeManager.getInstance().updateMalwareHashScore(compared_sha, "sb_fuzzy", -1L, AbstractFileDroppingLoader.LoaderType.SLOW);
            }
        } else {
            map = new HashMap<>();
            map.clear();
            tuple = null;
        }

        if (firstTime) {


            if (AeroSpikeManager.getInstance().getHash(malware_SHA256).get("sb_fuzzy") == null) {
                AeroSpikeManager.getInstance().updateMalwareHashScore(malware_SHA256, "sb_fuzzy", -1L, AbstractFileDroppingLoader.LoaderType.SLOW);
            }

            if (!matchFound) {
                ObjectMapper mapper = new ObjectMapper();
                map = new HashMap<>();
                map.put("sha256", malware_SHA256);
                map.put("timestamp", System.currentTimeMillis() / 1000);
                if ((long) AeroSpikeManager.getInstance().getHash(malware_SHA256).get("sb_fuzzy") == -1L) {
                    map.put("status", "Unknown (no matches yet)");
                } else {
                    map.put("status", "No better matches found");
                }
                map.put("loader", "fuzzy");

                String data_string = mapper.writeValueAsString(map);
                ArrayList<Object> malware_protoTuple = new ArrayList<>();
                malware_protoTuple.add(malware_timestamp);
                malware_protoTuple.add(malware_SHA256);
                if (isMalware(malware_SHA256)) {
                    malware_protoTuple.add(malware_ssdeep);
                } else {
                    malware_protoTuple.add(null);
                }
                malware_protoTuple.add(data_string);
                malware_protoTuple.add(malware_SHA256);
                tuple = TupleFactory.getInstance().newTuple(malware_protoTuple);
            }
            firstTime = false;
        }

        return tuple;
    }

    private static final int SPAMSUM_LENGTH = 64;

    private static final int MIN_BLOCKSIZE = 3;

    private static char[] eliminateSequences(String string) {
        char[] str = string.toCharArray();
        StringBuffer ret = new StringBuffer();

        for (int i = 3; i < str.length; i++) {
            if (str[i] != str[i - 1] ||
                    str[i] != str[i - 2] ||
                    str[i] != str[i - 3]) {
                ret.append(str[i]);
            }
        }
        return ret.toString().toCharArray();
    }

    private static int scoreStrings(char[] s1, char[] s2, int blockSize) {
        int score = 0;
        int len1, len2;

        len1 = s1.length;
        len2 = s2.length;

        if (len1 == 0) {
            len1 = 1;
        }
        if (len2 == 0) {
            len2 = 1;
        }

        if (len1 > SPAMSUM_LENGTH || len2 > SPAMSUM_LENGTH) {
            return 0;
        }

        score = StringUtils.getLevenshteinDistance(new String(s1), new String(s2));
        score = (score * SPAMSUM_LENGTH) / (len1 + len2);
        score = (100 * score) / 64;

        if (score >= 100) {
            return 0;
        }

        score = 100 - score;

        if (score > blockSize / MIN_BLOCKSIZE * Math.min(len1, len2)) {
            score = blockSize / MIN_BLOCKSIZE * Math.min(len1, len2);
        }
        return score;
    }


    private int Compare(FuzzyHash fh1, FuzzyHash fh2) {

        int score = 0;
        char[] s11, s12;
        char[] s21, s22;

        if (fh1.blocksize != fh2.blocksize &&
                fh1.blocksize != fh2.blocksize * 2 &&
                fh2.blocksize != fh1.blocksize * 2) {
            return 0;
        }

        s11 = eliminateSequences(fh1.hash);
        s21 = eliminateSequences(fh2.hash);
        s12 = eliminateSequences(fh1.hash2);
        s22 = eliminateSequences(fh2.hash2);

        if (fh1.blocksize == fh2.blocksize) {
            int score1, score2;
            score1 = scoreStrings(s11, s21, fh1.blocksize);
            score2 = scoreStrings(s12, s22, fh2.blocksize);

            score = Math.min(score1, score2);
        } else if (fh1.blocksize == fh2.blocksize * 2) {

            score = scoreStrings(s11, s22, fh1.blocksize);
        } else {

            score = scoreStrings(s12, s21, fh2.blocksize);
        }
        return (int) score;
    }


    private boolean isMalware(String sha256) {
        Boolean isMalware = false;
        Long score;

        if (last_SHA256.equals(sha256)) {
            if (cachedScore != null && cachedScore >= MALWARE_THRESHOLD) {
                isMalware = true;
            }
        } else {
            Map malware = AeroSpikeManager.getInstance().getHash(sha256);
            last_SHA256 = sha256;
            if (malware != null) {
                score = (Long) malware.get("score");
                cachedScore = score;
                if (score != null && score >= MALWARE_THRESHOLD) {
                    isMalware = true;
                }
            } else {
                cachedScore = -1L;
            }
        }
        return isMalware;
    }
}


