package net.redborder.malware.loaders.ssdeep;

import com.amazonaws.util.json.JSONArray;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import net.redborder.malware.util.aerospike.AeroSpikeManager;
import net.redborder.malware.util.kafka.KafkaManager;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.pig.EvalFunc;
import org.apache.pig.data.Tuple;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class Ssdeep extends EvalFunc<Map> {


    String SHA256;
    String ssdeep;
    String hdfs;
    Map<String, Object> map;
    Map<String, Object> relations;
    Integer score_compared;
    Integer score_torefresh;
    String malware_name_compared;
    ObjectMapper mapper;
    String zkHosts;

    public Map exec(Tuple input) throws IOException {
        map = new HashMap<>();
        relations = new HashMap<>();
        int score;
        SHA256 = (String) input.get(0);
        ssdeep = (String) input.get(1);
        hdfs = (String) input.get(2);
        zkHosts = (String) input.get(3);


        map.put("sha256", SHA256);
        map.put("ssdeep", ssdeep);

        System.out.println("Analyzing: "+ SHA256);

        if(isMalware(SHA256)) {
            Path pt = new Path("hdfs://" + hdfs + ":8020/user/oozie/ssdeep/current/part-r-00000");
            FileSystem fs = FileSystem.get(new Configuration());
            BufferedReader br = new BufferedReader(new InputStreamReader(fs.open(pt)));
            try {
                String line;
                line = br.readLine();
                while (line != null) {
                    String compared_sha = line.split(",")[0];
                    String hash2 = line.split(",")[1];


                    int blockSize1 = Integer.parseInt(ssdeep.substring(0, ssdeep.indexOf(":")));
                    int blockSize2 = Integer.parseInt(hash2.substring(0, hash2.indexOf(":")));
                    String hashpart11 = ssdeep.substring(ssdeep.indexOf(":") + 1, ssdeep.indexOf(":", ssdeep.indexOf(":") + 1));
                    String hashpart12 = ssdeep.substring(ssdeep.indexOf(":", ssdeep.indexOf(":") + 1) + 1);
                    String hashpart21 = hash2.substring(hash2.indexOf(":") + 1, hash2.indexOf(":", hash2.indexOf(":") + 1));
                    String hashpart22 = hash2.substring(hash2.indexOf(":", hash2.indexOf(":") + 1) + 1);


                    FuzzyHash fh1 = new FuzzyHash(blockSize1, hashpart11, hashpart12);
                    FuzzyHash fh2 = new FuzzyHash(blockSize2, hashpart21, hashpart22);

                    score = Compare(fh1, fh2);
                    if (score > 98) {
                        relations.put(compared_sha, score);


                        //     try {

                        if (!compared_sha.equals(SHA256)) {

                            //Map<String, Object> malware =  (Map<String, Object>) GridGainManager.getInstance().getMalwareCache().get(SHA256);
                            Map malware = AeroSpikeManager.getInstance().getHash(SHA256);

                            if (malware != null) {
                                score_torefresh = (Integer) malware.get("score");
                            } else {
                                score_torefresh = 0;
                            }

                            if (score_torefresh < 80) {
                                Map malware2 = AeroSpikeManager.getInstance().getHash(compared_sha);
                                //Map<String, Object> malware2 = (Map<String, Object>) GridGainManager.getInstance().getMalwareCache().get(compared_sha);
                                if (malware2 != null) {
                                    score_compared = (Integer) malware2.get("score");

                                    if (malware_name_compared == null) {
                                        malware_name_compared = "unknown";
                                    }

                                    if (!malware_name_compared.equals("clean")) {
                                        malware_name_compared = malware_name_compared + "-fuzzy";
                                    }
                                    malware_name_compared = (String)malware2.get("malware_name");

                                } else {
                                    score_compared = 0;
                                }
                                if (score_compared > 95) {
                                    Map<String, Object> data = new HashMap<>();

                                    String hostname = "";

                                    try {
                                        hostname = InetAddress.getLocalHost().getHostName();
                                    } catch (UnknownHostException e) {
                                        e.printStackTrace();
                                    }
                                    data.put("sha256", SHA256);
                                    data.put("timestamp", System.currentTimeMillis() / 1000);
                                    data.put("type", "ssdeep");
                                    data.put("sensor_name", hostname);
                                    data.put("score", 80);
                                    data.put("malware_name", malware_name_compared);

                                    mapper = new ObjectMapper();
                                    String send = mapper.writeValueAsString(data);
                                    KafkaManager.getInstance(zkHosts).send("rb_malware", send);
                                    List<String> columns = new ArrayList<>();
                                    List<Object> values = new ArrayList<>();
                                    data.put("cuckoo_before", isCuckooBefore(SHA256));

                                    columns.add("sha256");
                                    columns.add("score");
                                    columns.add("cuckoo_before");
                                    columns.add("malware_name");
                                    values.add(data.get("sha256"));
                                    values.add(data.get("score"));
                                    values.add(data.get("cuckoo_before"));
                                    values.add(data.get("malware_name"));

                                    AeroSpikeManager.getInstance().updateMalwareScore(SHA256,"sb_ssdeep",(Long)data.get("score"), AbstractFileDroppingLoader.LoaderType.SLOW);
                                    //GridGainManager.getInstance().getMalwareCache().put(SHA256, data);

                                }


                            }
                        }
                        //    } catch (GridException e) {
                        //        e.printStackTrace();
                        //    }
                    }
                    line = br.readLine();
                }

                map.put("similarity", relations);
                JSONArray jsonArray = new JSONArray();
                jsonArray.put(map);
                map.put("timestamp", System.currentTimeMillis() / 1000);
            } finally {
                br.close();
            }
        }else{
            map.clear();
        }

        return map;
    }

    public static final int SPAMSUM_LENGTH = 64;


    public static final int MIN_BLOCKSIZE = 3;


    static char[] eliminateSequences(String string) {
        char[] str = string.toCharArray();
        StringBuffer ret = new StringBuffer();

        for (int i = 3; i < str.length; i++) {
            if (str[i] != str[i - 1] ||
                    str[i] != str[i - 2] ||
                    str[i] != str[i - 3]) {
                ret.append(str[i]);
            }
        }

        return ret.toString().toCharArray();
    }

    static int scoreStrings(char[] s1, char[] s2, int blockSize) {
        int score = 0;
        int len1, len2;

        len1 = s1.length;
        len2 = s2.length;

        if (len1 > SPAMSUM_LENGTH || len2 > SPAMSUM_LENGTH) {
            return 0;
        }


        score = StringUtils.getLevenshteinDistance(new String(s1), new String(s2));


        score = (score * SPAMSUM_LENGTH) / (len1 + len2);


        score = (100 * score) / 64;


        if (score >= 100) {
            return 0;
        }


        score = 100 - score;


        if (score > blockSize / MIN_BLOCKSIZE * Math.min(len1, len2)) {
            score = blockSize / MIN_BLOCKSIZE * Math.min(len1, len2);
        }
        return score;
    }


    int Compare(FuzzyHash fh1, FuzzyHash fh2) {


        int score = 0;
        char[] s11, s12;
        char[] s21, s22;


        if (fh1.blocksize != fh2.blocksize &&
                fh1.blocksize != fh2.blocksize * 2 &&
                fh2.blocksize != fh1.blocksize * 2) {
            return 0;
        }

        s11 = eliminateSequences(fh1.hash);
        s21 = eliminateSequences(fh2.hash);

        s12 = eliminateSequences(fh1.hash2);
        s22 = eliminateSequences(fh1.hash2);

        if (fh1.blocksize == fh2.blocksize) {
            int score1, score2;
            score1 = scoreStrings(s11, s21, fh1.blocksize);
            score2 = scoreStrings(s12, s22, fh2.blocksize);

            score = Math.min(score1, score2);
        } else if (fh1.blocksize == fh2.blocksize * 2) {

            score = scoreStrings(s11, s22, fh1.blocksize);
        } else {

            score = scoreStrings(s12, s21, fh2.blocksize);
        }

        return (int) score;
    }


    public boolean isCuckooBefore(String md5) {
        Boolean before = false;
/*        try {
            Map<String, Object> malware = GridGainManager.getInstance().getMalwareCache().get(md5);
            if (malware != null) {
                before = (Boolean) malware.get("cuckoo_before");
                if (before == null) {
                    before = false;
                }
            }
        } catch (GridException e) {
            e.printStackTrace();
        }*/

        Map malware = AeroSpikeManager.getInstance().getHash(md5);
        if (malware != null) {
            before = (boolean)malware.get("cuckoo_before");
            if (before == null) {
                before = false;
            }
        }
        return before;
    }


    public boolean isMalware(String md5) {
        Boolean isMalware = false;
        Integer score;
        Map malware = AeroSpikeManager.getInstance().getHash(md5);
        if (malware != null) {
            score = (Integer)malware.get("score");
            if (score != null && score >= 80) {
                isMalware = true;
            }
        }
        return isMalware;
    }


}


