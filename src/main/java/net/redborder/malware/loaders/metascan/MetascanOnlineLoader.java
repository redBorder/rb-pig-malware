package net.redborder.malware.loaders.metascan;


import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by andresgomez on 13/1/15.
 */
public class MetascanOnlineLoader extends AbstractFileDroppingLoader {

    String apiKey;
    ObjectMapper mapper;
    String url = "http://hashlookup.metascan-online.com/v2/hash/";

    public MetascanOnlineLoader(String zkHost, String apiKey) {
        super(zkHost);
        mapper = new ObjectMapper();
        this.apiKey = apiKey;
        System.setProperty("jsse.enableSNIExtension", "false");
    }

    public MetascanOnlineLoader(String zkHost, String apiKey, String timeoutMS) {
        super(zkHost, timeoutMS);
        mapper = new ObjectMapper();
        this.apiKey = apiKey;
        System.setProperty("jsse.enableSNIExtension", "false");
    }

    public MetascanOnlineLoader(String zkHost, String apiKey, String timeoutMS, String useDevShm) {
        super(zkHost, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        this.apiKey = apiKey;
        System.setProperty("jsse.enableSNIExtension", "false");
    }

    @Override
    public Tuple processFile(Text key, BytesWritable bytesWritable, File file) throws IOException {

        if (isNeedToAnalize(key.toString())) {
            Map<String, Object> data = new HashMap<>();


            URL obj = new URL(url + key.toString());
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            // optional default is GET
            con.setRequestMethod("GET");

            //add request header
            con.setRequestProperty("apikey", apiKey);

            int responseCode = con.getResponseCode();

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            String hostname = "";

            try {
                hostname = InetAddress.getLocalHost().getHostName();
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            Map<String, Object> fileJson = mapper.readValue(response.toString(), Map.class);
            data.put("sha256", key.toString());
            data.put("cuckoo_before", isCuckooBefore(key.toString()));
            data.put("timestamp", System.currentTimeMillis() / 1000);
            data.put("type", "metascan");
            data.put("sensor_name", hostname);


            if (responseCode == 400) {
                System.out.println("CODE 400 Bad Requers - Unsupported HTTP method or invalid HTTP request (e.g., empty body)");
                getProtoTuple().clear();
                data.put("malware", "clean");
                data.put("score", 0);
            } else if (responseCode == 401) {
                System.out.println("CODE 401 Invalid API key - Either missing API key or invalid API is passed.");
                getProtoTuple().clear();
                data.put("malware_name", "clean");
                data.put("score", 0);
            } else if (responseCode == 403) {
                System.out.println("CODE 403 Signature lookup limit reached, try again later - The hourly hash lookup limit has been reached for this API key.");
                getProtoTuple().clear();
                data.put("malware_name", "clean");
                data.put("score", 0);
            } else if (responseCode == 200) {
                System.out.println(response);
                if (response.toString().contains("Not Found")) {
                    data.put("malware_name", "clean");
                    data.put("score", 0);
                } else {
                    Map<String, Object> fileInfo = (Map<String, Object>) fileJson.get("file_info");

                 /*   if (fileInfo != null) {
                        if (fileInfo.get("file_type_description") != null)
                            data.put("file_description", fileInfo.get("file_type_description"));
                        if (fileInfo.get("file_type_extension") != null)
                            data.put("file_extension", fileInfo.get("file_type_extension"));
                        if (fileInfo.get("display_name") != null)
                            data.put("file_display_name", fileInfo.get("display_name"));
                    }*/

                    Map<String, Object> scanResults = (Map<String, Object>) fileJson.get("scan_results");

                    if (scanResults != null) {
                        //data.put("scan_result", scanResults.get("scan_all_result_a"));
                        Integer scan_result = (Integer) scanResults.get("scan_all_result_i");

                        if (scan_result == 1) {
                            //data.put("scan_date", scanResults.get("start_time"));

                            Map<String, Object> scanDetails = (Map<String, Object>) scanResults.get("scan_details");

                            for (String scanKey : scanDetails.keySet()) {
                                Map<String, Object> scan = (Map<String, Object>) scanDetails.get(scanKey);
                                if (!scan.get("threat_found").toString().equals("")) {
                                    data.put("malware_name", scan.get("threat_found"));

                                    //data.put("engine", scanKey);
                                    //data.put("scan_time", scan.get("scan_time"));
                                    data.put("score", 100);
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            getProtoTuple().clear();
            getProtoTuple().add(data);
            addMalwareCache(key.toString(), data);
        } else {
            getProtoTuple().clear();
        }

        return getTupleFactory().newTuple(getProtoTuple());
    }
}
