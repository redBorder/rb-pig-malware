package net.redborder.malware.loaders.metascan;


import com.kanishka.virustotal.dto.VirusScanInfo;
import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by andresgomez on 13/1/15.
 */
public class MetascanOnlineLoader extends AbstractFileDroppingLoader {

    String apiKey;
    ObjectMapper mapper;
    String lookupURL = "http://hashlookup.metascan-online.com/v2/hash/";
    String scanURL = "https://scan.metascan-online.com/v2/file";
    final String scoreName = "fb_clamscan";

    public MetascanOnlineLoader(String zkHost, String apiKey) {
        super(zkHost);
        mapper = new ObjectMapper();
        this.apiKey = apiKey;
        System.setProperty("jsse.enableSNIExtension", "false");
    }

    public MetascanOnlineLoader(String zkHost, String apiKey, String timeoutMS) {
        super(zkHost, timeoutMS);
        mapper = new ObjectMapper();
        this.apiKey = apiKey;
        System.setProperty("jsse.enableSNIExtension", "false");
    }

    public MetascanOnlineLoader(String zkHost, String apiKey, String timeoutMS, String useDevShm) {
        super(zkHost, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        this.apiKey = apiKey;
        System.setProperty("jsse.enableSNIExtension", "false");
    }

    @Override
    public Tuple processFile(Text key, BytesWritable bytesWritable, File file) throws IOException {
        String hash = key.toString();
        Map<String, Object> data = new HashMap<>();

        URL objLookup = new URL(lookupURL + key.toString());
        HttpURLConnection con = (HttpURLConnection) objLookup.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("apikey", apiKey);
        int responseCode = con.getResponseCode();

        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        StringBuffer response = new StringBuffer();
        String inputLine;

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();


        if (responseCode == 400) {
            System.out.println("CODE 400 Bad Requers - Unsupported HTTP method or invalid HTTP request (e.g., empty body)");
            data.put("malware", "N/A");
            data.put("score", -1L);
        } else if (responseCode == 401) {
            System.out.println("CODE 401 Invalid API key - Either missing API key or invalid API is passed.");
            data.put("malware", "N/A");
            data.put("score", -1L);
        } else if (responseCode == 403) {
            System.out.println("CODE 403 Signature lookup limit reached, try again later - The hourly hash lookup limit has been reached for this API key.");
            data.put("malware", "N/A");
            data.put("score", -1L);
            data.put("msg", "Signature lookup limit reached, try again later");
        } else if (responseCode == 200) {
            if (response.toString().contains("Not Found")) {
                data.put("malware", "N/A");
                data.put("score", -1L);

                URL objScan = new URL(lookupURL);
                con = (HttpURLConnection) objScan.openConnection();
                con.setRequestMethod("POST");
                con.setRequestProperty("apikey", apiKey);
                con.setDoOutput(true);
                DataOutputStream wr = new DataOutputStream(con.getOutputStream());

                for(byte b : bytesWritable.getBytes()){
                    wr.writeByte(b);
                }

                wr.flush();
                wr.close();

                responseCode = con.getResponseCode();

                in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                response = new StringBuffer();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                if (responseCode == 400) {
                    System.out.println("CODE 400 Bad Requers - Unsupported HTTP method or invalid HTTP request (e.g., empty body)");
                    data.put("malware", "N/A");
                    data.put("score", -1L);
                } else if (responseCode == 401) {
                    System.out.println("CODE 401 Invalid API key - Either missing API key or invalid API is passed.");
                    data.put("malware", "N/A");
                    data.put("score", -1L);
                } else if (responseCode == 403) {
                    System.out.println("CODE 403 Signature lookup limit reached, try again later - The hourly hash lookup limit has been reached for this API key.");
                    data.put("malware", "N/A");
                    data.put("score", -1L);
                    data.put("msg", "Scan limit reached, try again later");
                } else if (responseCode == 200) {
                    Map<String, Object> fileJson = mapper.readValue(response.toString(), Map.class);
                    data.putAll(fileJson);
                }

            } else {
                Map<String, Object> fileJson = mapper.readValue(response.toString(), Map.class);
                data.put("ms_file_id", fileJson.get("file_id"));

                Map<String, Object> fileInfo = (Map<String, Object>) fileJson.get("file_info");
                data.putAll(fileInfo);

                Map<String, Object> scanResult = (Map<String, Object>) fileJson.get("scan_results");
                data.put("status", scanResult.get("scan_all_result_a").toString().toLowerCase());
                data.put("engines_total", scanResult.get("total_avs"));

                Map<String, Object> scans = (Map<String, Object>) fileJson.get("scan_details");
                List<Map<String, Object>> engines = new ArrayList<>();

                Long detected = 0L;
                Long total = scans.size() == 0 ? 1L : scans.size();
                for (String engineName : scans.keySet()) {
                    Map<String, Object> engine = new HashMap<>();
                    Map<String, Object> scan = (Map<String, Object>) scans.get(engineName);
                    String result = scan.get("threat_found").equals("") ? "N/A" : (String) scan.get("threat_found");

                    if(!result.equals("N/A")){
                        detected++;
                    }

                    engine.put("engine", engineName);
                    engine.put("result", result);
                    engine.put("version", scan.get("def_time"));
                    engines.add(engine);
                }


                data.put("score", detected * 100/total );
                data.put("engines", engines);
            }
        }


        try {
            String hostname = InetAddress.getLocalHost().getHostName();
            data.put("sensor_name", hostname);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        data.put("loader", "metascan");
        data.put("timestamp", System.currentTimeMillis() / 1000);

        Double weight = getWeight(scoreName);
        if(weight != null){
            data.put("weight", weight);
        }

        String jsonData = mapper.writeValueAsString(data);

        Long score = (Long) data.get("score");
        updateMalwareScore(hash, scoreName, score);

        getProtoTuple().clear();
        getProtoTuple().add(hash);
        getProtoTuple().add(jsonData);

        return getTupleFactory().newTuple(getProtoTuple());
    }
}
