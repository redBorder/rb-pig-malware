/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *  Copyright 2013 Endgame Inc.
 *
 */


package net.redborder.malware.loaders;

import net.redborder.malware.util.JsonUtil;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ExecutingJsonLoader extends AbstractExecutingLoader {
    ObjectMapper mapper;
    JsonUtil jsonUtil = new JsonUtil();

    public ExecutingJsonLoader(String script, String gridgainKey) {
        super(script, gridgainKey);
        mapper = new ObjectMapper();
    }

    public ExecutingJsonLoader(String script, String gridgainKey, String timeoutMS) {
        super(script, gridgainKey, timeoutMS);
        mapper = new ObjectMapper();
    }

    public ExecutingJsonLoader(String script, String gridgainKey, String timeoutMS, String useDevShm) {
        super(script, gridgainKey, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
    }

    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {

        Map<String, Object> data = new HashMap<>();

        data.put("MD5", key.toString());
        data.put("timeout", timedOut);

        protoTuple.clear();

        if (!output.equals("")) {
            try {
                data.put("data", mapper.readValue(output, Map.class));
                protoTuple.add(output);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else {
            addMD5ToGridGain(key.toString());
        }

        return tupleFactory.newTuple(protoTuple);
    }
}
