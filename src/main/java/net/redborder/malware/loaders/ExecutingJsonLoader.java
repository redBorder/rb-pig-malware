/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * <p/>
 * Copyright 2013 Endgame Inc.
 */


package net.redborder.malware.loaders;

import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExecutingJsonLoader extends AbstractExecutingLoader {
    ObjectMapper mapper;
    String name;

    public ExecutingJsonLoader(String zkHost, String script, String name) {
        super(zkHost, script);
        mapper = new ObjectMapper();
        this.name = name;
    }

    public ExecutingJsonLoader(String zkHost, String script, String timeoutMS, String name) {
        super(zkHost, script, timeoutMS);
        mapper = new ObjectMapper();
        this.name = name;
    }

    public ExecutingJsonLoader(String zkHost, String script, String timeoutMS, String useDevShm, String name) {
        super(zkHost, script, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        this.name = name;
    }

    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {

        Map<String, Object> msg = new HashMap<>();
        Map<String, Object> data = new HashMap<>();

        String hostname = "";

        try {
            hostname = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        data.put("sha256", key.toString());
        data.put("timestamp", System.currentTimeMillis() / 1000);
        data.put("sensor_name", hostname);
        data.put("cuckoo_before", isCuckooBefore(key.toString()));


        if (!output.equals("") && name.equals("yara")) {
            try {
                msg = mapper.readValue(output, Map.class);
            } catch (IOException e) {
                e.printStackTrace();
                output = "";
            }
        }


        List<Map<String, Object>> results = new ArrayList<>();

        if (name.equals("yara")) {
            data.put("type", "yara");
        }
        if (name.equals("kaspersky")) {
            data.put("type", "kaspersky");
            if (output.replaceAll("\n", "").equals("clean")) {
                data.put("score", 0);
            } else {
                data.put("score", 100);
            }
            data.put("malware_name", output.replaceAll("\n", ""));
            results.add(data);
        }

        if (output.equals("") && name.equals("yara")) {
            data.put("score", 0);
            data.put("malware_name", "clean");
            results.add(data);
        } else if (name.equals("yara")) {
            data.put("score", 100);
            data.put("malware_name", output);

            if (name.equals("yara")) {
                List<Map<String, Object>> matches = (ArrayList) msg.get("matches");
                if (matches.size() > 0) {
                    for (Map<String, Object> match : matches) {
                        Map<String, Object> result = new HashMap<>();

                        result.putAll(data);
                        result.put("malware_name", match.get("rule"));
                        results.add(result);
                    }
                } else {
                    data.put("score", 0);
                    data.put("malware_name", "clean");
                    results.add(data);
                }
            }

        }


        protoTuple.clear();
        Long score = getScore(key.toString());
        Integer currentScore = (Integer) data.get("score");

        if (score == null || score.intValue() != currentScore) {
            getProtoTuple().add(data);
        }

        addMalwareCache(key.toString(), data);
        return tupleFactory.newTuple(protoTuple);
    }
}
