/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * <p/>
 * Copyright 2013 Endgame Inc.
 */


package net.redborder.malware.loaders;

import net.redborder.malware.loaders.yara.YaraLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class
ExecutingJsonLoader extends AbstractExecutingLoader {
    ObjectMapper mapper;
    String name;
    String scoreName;

    public ExecutingJsonLoader(String zkHost, String script, String name) {
        super(zkHost, script);
        mapper = new ObjectMapper();
        this.name = name;
        this.scoreName = "fb_" + name;
    }

    public ExecutingJsonLoader(String zkHost, String script, String timeoutMS, String name) {
        super(zkHost, script, timeoutMS);
        mapper = new ObjectMapper();
        this.name = name;
        this.scoreName = "fb_" + name;
    }

    public ExecutingJsonLoader(String zkHost, String script, String timeoutMS, String useDevShm, String name) {
        super(zkHost, script, timeoutMS, useDevShm);
        mapper = new ObjectMapper();
        this.name = name;
        this.scoreName = "fb_" + name;
    }

    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {
        String hash = key.toString();
        Map<String, Object> data = new HashMap<>();
        LoaderType loaderType = LoaderType.FAST;
        System.out.println("SALIDA:   " + output);

        if (name.equals("yara")) {
            loaderType = LoaderType.FAST;
            YaraLoader loader = new YaraLoader(zkHost);
            data = loader.process(output);

        } else if (name.equals("kaspersky")) {
            data.put("loader", "kaspersky");
            loaderType = LoaderType.FAST;

            String malware_name = output.replaceAll("\n", "");

            if (!malware_name.equals("")) {
                if (malware_name.equals("clean")) {
                    data.put("score", 0L);
                    data.put("malware", "N/A");
                } else {
                    data.put("score", 100L);
                    data.put("malware", malware_name);
                }
            } else {
                data.put("score", -1L);
                data.put("malware", "N/A");
            }
        }

        data.put("timestamp", System.currentTimeMillis() / 1000);


        Double weight = getWeight(scoreName);
        if (weight != null) {
            data.put("weight", weight);
        }

        try {
            String hostname = InetAddress.getLocalHost().getHostName();
            data.put("sensor_name", hostname);
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }

        String jsonData = "{}";
        try {
            jsonData = mapper.writeValueAsString(data);
        } catch (IOException e) {
            e.printStackTrace();
        }


        Long score = (Long) data.get("score");
        updateMalwareScore(hash, scoreName, score, loaderType);

        getProtoTuple().clear();
        getProtoTuple().add(hash);
        getProtoTuple().add(jsonData);

        return tupleFactory.newTuple(getProtoTuple());
    }
}
