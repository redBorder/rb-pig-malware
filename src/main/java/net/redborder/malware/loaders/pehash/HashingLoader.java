/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 * <p/>
 * Copyright 2013 Endgame Inc.
 */

package net.redborder.malware.loaders.pehash;

import com.aerospike.client.Key;
import com.aerospike.client.policy.Policy;
import com.amazonaws.util.json.JSONArray;
import net.redborder.malware.loaders.AbstractExecutingLoader;
import net.redborder.malware.util.aerospike.AeroSpikeManager;
import org.apache.commons.lang.StringUtils;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Hello world!
 */
public class HashingLoader extends AbstractExecutingLoader {
    ArrayList<Object> protoTuple = new ArrayList<>();
    TupleFactory tupleFactory = TupleFactory.getInstance();
    ObjectMapper mapper = new ObjectMapper();

    public HashingLoader(String zkHost) {
        super(zkHost, "scripts/hasher.py");
    }

    public HashingLoader(String zkHost, String timeoutMS) {
        super(zkHost, "scripts/hasher.py", timeoutMS);
    }

    public HashingLoader(String zkHost, String timeoutMS, String useDevShm) {
        super(zkHost, "scripts/hasher.py", timeoutMS, useDevShm);
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {

        Long needToHash = null;

        Map<String, Object> data = AeroSpikeManager.getInstance().getHashfromControlFiles(key.toString());
        if (data != null && data.get("fuzzy") != null) {
            needToHash = (Long) data.get("fuzzy");
        }

        if (needToHash == null) {
            return super.processFile(key, value, binaryFile);
        } else {
            return null;
        }

    }

    @Override
    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {
        protoTuple.clear();
        List<Map<String, Object>> results = new ArrayList<>();
        // when adding, might want to consider doing explicit casts from Writables to Pig datatypes - does not appear to be needed at this time
        //This is the spot to do the generic JSON loading. some override function for data formatting would be here
        try {
            LinkedHashMap<String, Object> events = mapper.readValue(output, LinkedHashMap.class);
            String sdhash = events.get("sdhash").toString();
            StringBuilder ssdeep = new StringBuilder();
            int index0 = sdhash.indexOf("/dev/shm/");
            int index1 = sdhash.indexOf(":", index0);
            int index2 = StringUtils.ordinalIndexOf(sdhash, ":", 2);
            StringBuilder final_sdhash = new StringBuilder();
            sdhash = final_sdhash.append(sdhash.substring(0, index2)).append(":").append(key.toString().length()).append(":").append(key.toString()).append(sdhash.substring(index1, sdhash.length())).toString();
            sdhash = sdhash.replace("\n", "");
            events.remove("sdhash");
            events.put("sdhash", sdhash);
            JSONArray jsonArray = new JSONArray();

            events.put("SHA256", key.toString());
            events.put("timestamp", Long.valueOf(System.currentTimeMillis() / 1000L).intValue());
            jsonArray.put(events);

            protoTuple.add(jsonArray.getString(0));
            AeroSpikeManager.getInstance().updateFuzzyStatus(key.toString());
        } catch (Exception e) {
        }

        return tupleFactory.newTuple(protoTuple);
    }


}
