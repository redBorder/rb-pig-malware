/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *  Copyright 2013 Endgame Inc.
 *
 */

package net.redborder.malware.loaders.pehash;

import com.amazonaws.util.json.JSONArray;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import net.redborder.malware.loaders.AbstractExecutingLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;
import org.apache.pig.data.TupleFactory;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.JSONObject;
import org.json.simple.parser.JSONParser;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Hello world!
 */
public class HashingLoader extends AbstractExecutingLoader {
    ArrayList<Object> protoTuple = new ArrayList<>();
    TupleFactory tupleFactory = TupleFactory.getInstance();
    ObjectMapper mapper = new ObjectMapper();

    public HashingLoader(String zkHost) {
        super(zkHost, "scripts/hasher.py");
    }

    public HashingLoader(String zkHost, String timeoutMS) {
        super(zkHost, "scripts/hasher.py", timeoutMS);
    }

    public HashingLoader(String zkHost, String timeoutMS, String useDevShm) {
        super(zkHost, "scripts/hasher.py", timeoutMS, useDevShm);
    }


    @Override
    public Tuple outputToTuple(Text key, BytesWritable value, String output, boolean timedOut) {
        protoTuple.clear();
        List<Map<String, Object>> results = new ArrayList<>();
        // when adding, might want to consider doing explicit casts from Writables to Pig datatypes - does not appear to be needed at this time
        //This is the spot to do the generic JSON loading. some override function for data formatting would be here
        try {
            Map<String, Object> events = mapper.readValue(output, Map.class);
            String sdhash = events.get("sdhash").toString();
            int index0 = sdhash.indexOf("/dev/shm/");
            int index1 = sdhash.indexOf(":",index0);
            String toDelete = sdhash.substring(index0, (index1-1));
            sdhash =sdhash.replaceAll(toDelete,"/hadoop");
            sdhash = sdhash.replace("\n","");
            events.remove("sdhash");
            events.put("sdhash",sdhash);
            System.out.println(sdhash);
            JSONArray jsonArray = new JSONArray();
            events.put("SHA256", key.toString());

            jsonArray.put(events);

            System.out.println(jsonArray.getString(0));
            protoTuple.add(jsonArray.getString(0));

        } catch (Exception e) {
        }

        return tupleFactory.newTuple(protoTuple);
    }
}
