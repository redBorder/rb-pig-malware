/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. The ASF
 * licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *  Copyright 2013 Endgame Inc.
 *
 */
package net.redborder.malware.loaders.av;

import net.redborder.malware.loaders.AbstractFileDroppingLoader;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.IOUtils;
import org.apache.hadoop.io.Text;
import org.apache.pig.data.Tuple;

import java.io.*;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketTimeoutException;
import java.util.HashMap;
import java.util.Map;

/**
 * Hello world!
 */
public class ClamScanDaemonLoader extends AbstractFileDroppingLoader {
    SocketAddress clamdEndoint = new InetSocketAddress("127.0.0.1", 3310);

    public ClamScanDaemonLoader(String zkHost) {
        super(zkHost);
    }

    public ClamScanDaemonLoader(String zkHost, String timeoutMS) {
        super(zkHost, timeoutMS);
    }

    public ClamScanDaemonLoader(String zkHost, String timeoutMS, String useDevShm) {
        super(zkHost, timeoutMS, useDevShm);
    }

    @Override
    public Tuple processFile(Text key, BytesWritable value, File binaryFile) throws IOException {
        if (isNeedToAnalize(key.toString())) {
            Socket sock = null;
            BufferedReader in = null;
            OutputStream out = null;
            String result = "";
            try {
                sock = new Socket();
                if (getTimeoutMS() < (long) Integer.MAX_VALUE) {
                    sock.setSoTimeout((int) getTimeoutMS());
                }

                sock.connect(clamdEndoint);

                out = sock.getOutputStream();
                in = new BufferedReader(new InputStreamReader(sock.getInputStream()));

                out.write(("nSCAN " + binaryFile.getAbsolutePath() + "\n").getBytes());
                String data = in.readLine();
                if (data != null) {
                    result = data.
                            substring(data.indexOf(':') + 1). // "remove the /path/to/file: "
                            replace(" FOUND", ""). // no need for the "FOUND" string
                            replaceAll("\\([a-f0-9:]+\\)$", "").trim(); // on some versions of clamscan, it adds (MD5:NUM)
                }
            } catch (SocketTimeoutException e) {
                result = "";
            } finally {
                IOUtils.closeSocket(sock);
                IOUtils.closeStream(in);
                IOUtils.closeStream(out);
            }

            Map<String, Object> data = new HashMap<>();

            if(result.equals("OK")){
                getProtoTuple().clear();

                data.put("sha256", key.toString());
                data.put("malware_name", "clean");
                data.put("score", 0);
            }else {
                getProtoTuple().clear();
                data.put("sha256", key.toString());
                data.put("malware_name", result);
                data.put("score", 100);

                getProtoTuple().add(data);
            }
            data.put("timestamp", System.currentTimeMillis() / 1000);
            data.put("sensor_name", "clamav");
            addMalwareCache(key.toString(), data);
            sendKafka("rb_malware", data);

            return getTupleFactory().newTuple(getProtoTuple());
        } else {
            getProtoTuple().clear();
            return getTupleFactory().newTuple(getProtoTuple());
        }
    }
}

