package net.redborder.malware.util;

import net.redborder.malware.util.logger.RbLogger;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.jets3t.service.S3Service;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.model.S3Object;
import org.jets3t.service.model.StorageObject;
import org.jets3t.service.security.AWSCredentials;
import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by andresgomez on 27/1/15.
 */
public class BuildSequenceFileFromS3 extends Configured implements Tool {

    private static Logger log = null;
    private static final String SEQUENCE_FILE_PATH = "/user/oozie/sequence_file";

    public static void main(String[] args) throws Exception {
        if (args.length < 4) {
            System.err.println("Usage: hadoop jar JAR " + net.redborder.malware.util.BuildSequenceFileFromS3.class.getName() + " <s3Bucket> <s3Key> <awsAcessKey> <awsSecretKey>");
            System.exit(-1);
        }

        log = RbLogger.getLogger(BuildSequenceFileFromS3.class.getName());

        ToolRunner.run(new net.redborder.malware.util.BuildSequenceFileFromS3(), args);
    }

    @Override
    public int run(String[] args) throws Exception {

        String s3Bucket = args[0];
        String s3Key = args[1];
        String awsAccessKey = args[2];
        String awsSecretKey = args[3];

        AWSCredentials awsCredentials =
                new AWSCredentials(awsAccessKey, awsSecretKey);

        S3Service s3Service = new RestS3Service(awsCredentials);


        S3Object objects[] = s3Service.listObjects(s3Bucket, s3Key, ".analized");

        List<String> keys = new ArrayList<>();

        for (S3Object o : objects) {
            keys.add(o.getName());
        }

        if (keys.size() > 0) {
            DateTime date = new DateTime();

            Long timestamp = System.currentTimeMillis();
            String keysMd5 = DigestUtils.md5Hex(keys.toString().getBytes());

            String fileKey = timestamp + "." + keysMd5 + ".seq";
            String path = SEQUENCE_FILE_PATH + "/" + date.getYear() + "/" + date.getMonthOfYear() + "/" + date.getDayOfMonth() + "/" + date.getHourOfDay();
            Path name = new Path(path + "/" + fileKey);

            Text key = new Text();
            BytesWritable val = new BytesWritable();

            Configuration conf = getConf();

            FileSystem fs = FileSystem.get(conf);

            Path fsPath = new Path(path);

            if (!fs.exists(fsPath)) {
                log.log(Level.INFO, "Creating dirs to new hour ...");
                fs.mkdirs(fsPath);
            }

            SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, name, Text.class, BytesWritable.class, SequenceFile.CompressionType.RECORD);

            long totalBytes = 0L;
            for (S3Object o : objects) {
                log.log(Level.INFO, "Getting: s3://" + o.getBucketName() + "/" + o.getName());
                S3Object s3Object = s3Service.getObject(o.getBucketName(), o.getName());


                byte[] bytes = IOUtils.toByteArray(s3Object.getDataInputStream());
                totalBytes += bytes.length;
                val.set(bytes, 0, bytes.length);
                key.set(DigestUtils.md5Hex(bytes));
                writer.append(key, val);
                s3Object.closeDataInputStream();

                StorageObject storageObject = new S3Object();
                storageObject.setBucketName(o.getBucketName());
                storageObject.setKey(o.getName() + ".analized");
                s3Service.renameObject(o.getBucketName(), o.getName(), storageObject);
            }

            writer.close();

            log.log(Level.INFO, "Wrote sequence file [ " + totalBytes + "B ] at: " + path + "/" + fileKey);
        } else {
            log.log(Level.INFO, "Not found files on S3.");
        }

        return 0;
    }
}

