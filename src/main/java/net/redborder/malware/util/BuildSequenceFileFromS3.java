package net.redborder.malware.util;

import net.redborder.malware.util.gridgain.GridGainManager;
import net.redborder.malware.util.logger.RbLogger;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.gridgain.grid.cache.GridCache;
import org.jets3t.service.S3Service;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.model.S3Object;
import org.jets3t.service.security.AWSCredentials;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by andresgomez on 27/1/15.
 */
public class BuildSequenceFileFromS3 extends Configured implements Tool {

    private static Logger log = null;
    private static final String OOZIE_ACTION_OUTPUT_PROPERTIES = "oozie.action.output.properties";



    public static void main(String[] args) throws Exception {
        if (args.length < 4) {
            System.err.println("Usage: hadoop jar JAR " + net.redborder.malware.util.BuildSequenceFileFromS3.class.getName() + " <HDFSOutputDir> <HDFSFileOozieFlag> <awsAcessKey> <awsSecretKey>");
            System.exit(-1);
        }

        log = RbLogger.getLogger(BuildSequenceFileFromS3.class.getName());

        ToolRunner.run(new net.redborder.malware.util.BuildSequenceFileFromS3(), args);
    }

    @Override
    public int run(String[] args) throws Exception {
        List<String> md5ToAnalize = new ArrayList<>();
        GridCache<String, List<String>> cache = GridGainManager.getInstance().getMalwareCache();

        Path name = new Path(args[0]);

        Text key = new Text();
        BytesWritable val = new BytesWritable();

        Configuration conf = getConf();

        FileSystem fs = FileSystem.get(conf);
        SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, name, Text.class, BytesWritable.class, SequenceFile.CompressionType.RECORD);

        String awsAccessKey = args[2];
        String awsSecretKey = args[3];

        AWSCredentials awsCredentials =
                new AWSCredentials(awsAccessKey, awsSecretKey);

        S3Service s3Service = new RestS3Service(awsCredentials);

        S3Object objects[] = s3Service.listObjects("redborder", "rbdata/rb_malware", ".analized");

        long totalBytes = 0L;
        for (S3Object o : objects) {
            log.log(Level.INFO, "Getting: s3://" + o.getBucketName() + "/" + o.getName());
            S3Object s3Object = s3Service.getObject(o.getBucketName(), o.getName());

            byte[] bytes = IOUtils.toByteArray(s3Object.getDataInputStream());
            totalBytes += bytes.length;
            val.set(bytes, 0, bytes.length);
            key.set(DigestUtils.md5Hex(bytes));
            writer.append(key, val);
            md5ToAnalize.add(key.toString());
            s3Object.closeDataInputStream();
        }

        writer.hflush();
        writer.close();

        log.log(Level.INFO, "Wrote sequence file [ "+ totalBytes +"B ] at: " + name.getName());

        Long timestamp = System.currentTimeMillis();
        String keysMd5 = DigestUtils.md5Hex(md5ToAnalize.toString().getBytes());
        String gridgainKey = timestamp+"."+keysMd5;

        cache.put(gridgainKey, md5ToAnalize);
        log.log(Level.INFO, "Updated " + md5ToAnalize.size() + " md5s on gridgain with key: " + gridgainKey);

        Path flag = new Path(args[1] + "/" + gridgainKey);

        fs.create(flag);

        log.log(Level.INFO, "Created flag file at: " + args[1] + "/" + gridgainKey);

        String oozieProp = System.getProperty(OOZIE_ACTION_OUTPUT_PROPERTIES);
        if (oozieProp != null) {
            File propFile = new File(oozieProp);
            Properties props = new Properties();
            props.setProperty("gridgainKey", gridgainKey);
            OutputStream os = new FileOutputStream(propFile);
            props.store(os, "");
            os.close();
        } else
            throw new RuntimeException(OOZIE_ACTION_OUTPUT_PROPERTIES
                    + " System property not defined");



        return 0;
    }
}

