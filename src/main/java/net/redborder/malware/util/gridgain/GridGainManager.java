package net.redborder.malware.util.gridgain;

import com.amazonaws.auth.BasicAWSCredentials;
import org.gridgain.grid.Grid;
import org.gridgain.grid.GridConfiguration;
import org.gridgain.grid.GridException;
import org.gridgain.grid.GridGain;
import org.gridgain.grid.cache.GridCache;
import org.gridgain.grid.cache.GridCacheConfiguration;
import org.gridgain.grid.cache.GridCacheDistributionMode;
import org.gridgain.grid.cache.GridCacheMode;
import org.gridgain.grid.spi.discovery.tcp.GridTcpDiscoverySpi;
import org.gridgain.grid.spi.discovery.tcp.ipfinder.s3.GridTcpDiscoveryS3IpFinder;
import org.gridgain.grid.spi.discovery.tcp.ipfinder.vm.GridTcpDiscoveryVmIpFinder;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/**
 * Created by andresgomez on 27/1/15.
 */
public class GridGainManager {

    private static GridGainManager theInstance = null;
    private Grid grid;
    private List<String> _gridGainServers;
    private String _multicastGroup;
    private Map<String, Object> _s3Config = null;

    public static GridGainManager getInstance() throws GridException {
        if (theInstance == null) {
            theInstance = new GridGainManager();
        }

        return theInstance;
    }

    private GridGainManager() throws GridException {
        grid = GridGain.start(initConfig());

        //TODO: Read gridgain config from yaml file, similiar rb-bi.
        Map<String, Object> gridGainConfig = null;

        if(!gridGainConfig.containsKey("s3")) {
            _gridGainServers = (List<String>) gridGainConfig.get("servers");
            _multicastGroup = (String) gridGainConfig.get("multicast");
        }
        else{
            _s3Config = (Map<String, Object>) gridGainConfig.get("s3");
        }
    }

    private GridConfiguration initConfig() {
        GridConfiguration conf = new GridConfiguration();
        List<GridCacheConfiguration> caches = new ArrayList<GridCacheConfiguration>();
        GridTcpDiscoverySpi gridTcp = new GridTcpDiscoverySpi();

        if (_s3Config == null) {
            GridTcpDiscoveryVmIpFinder gridIpFinder = new GridTcpDiscoveryVmIpFinder();

            Collection<InetSocketAddress> ips = new ArrayList<>();

            try {
                conf.setLocalHost(InetAddress.getLocalHost().getHostName());
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            if (_gridGainServers != null) {
                for (String server : _gridGainServers) {
                    String[] serverPort = server.split(":");
                    ips.add(new InetSocketAddress(serverPort[0], Integer.valueOf(serverPort[1])));
                }

                gridIpFinder.registerAddresses(ips);
            }

            gridTcp.setIpFinder(gridIpFinder);

        } else {
            GridTcpDiscoveryS3IpFinder s3IpFinder = new GridTcpDiscoveryS3IpFinder();
            s3IpFinder.setBucketName(_s3Config.get("bucket").toString());
            s3IpFinder.setAwsCredentials(new BasicAWSCredentials(_s3Config.get("access_key").toString(), _s3Config.get("secret_key").toString()));
            gridTcp.setIpFinder(s3IpFinder);
        }

        conf.setDiscoverySpi(gridTcp);

        GridCacheConfiguration cacheMobile = new GridCacheConfiguration();
        cacheMobile.setName("malware-pig");
        cacheMobile.setDistributionMode(GridCacheDistributionMode.NEAR_ONLY);
        cacheMobile.setCacheMode(GridCacheMode.PARTITIONED);
        caches.add(cacheMobile);

        conf.setCacheConfiguration(caches.toArray(new GridCacheConfiguration[caches.size()]));

        return conf;
    }

    public <K, V> GridCache<K, V> getCache(String cacheName){
        return grid.cache(cacheName);
    }

    public GridCache<String , List<String>> getMalwareCache(){
        return getCache("malware-pig");
    }
}
