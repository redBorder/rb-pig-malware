package net.redborder.malware.util.gridgain;

import org.apache.commons.lang.StringUtils;
import org.gridgain.grid.GridException;
import org.gridgain.grid.cache.GridCacheTx;
import org.gridgain.grid.cache.store.GridCacheStoreAdapter;
import org.gridgain.grid.lang.GridBiInClosure;
import org.jetbrains.annotations.Nullable;

import java.sql.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by andresgomez on 30/1/15.
 */
public class PostgreSqlGridGain extends GridCacheStoreAdapter<String, Map<String, Object>> {

    private static final String ATTR_NAME = "SIMPLE_STORE_CONNECTION";

    public PostgreSqlGridGain() throws GridException {
        prepareDb();
    }

    @Nullable
    @Override
    public Map<String, Object> load(GridCacheTx tx, String key) throws GridException {
        Connection conn = null;

        try {
            conn = connection(tx);

            try (PreparedStatement st = conn.prepareStatement("SELECT * FROM MALWARE WHERE md5=?")) {
                st.setString(1, key.toString());

                ResultSet rs = st.executeQuery();

                if (rs.next())
                    return toMap(rs);
            }
        } catch (SQLException e) {
            throw new GridException("Failed to load object for key: " + key, e);
        } finally {
            end(tx, conn); // This method won't close connection if transaction is not null.
        }

        return null;
    }

    @Override
    public void put(@Nullable GridCacheTx tx, String key, Map<String, Object> val) throws GridException {
        Connection conn = null;

        try {
            conn = connection(tx);

            int updated;
            try (PreparedStatement st = conn.prepareStatement(
                    "UPDATE MALWARE SET file=?, malware=?, toAnalize=? WHERE md5=?")) {
                st.setString(1, (String) val.get("file"));
                st.setString(2, (String) val.get("malware"));
                st.setBoolean(3, (Boolean) val.get("toAnalize"));
                st.setString(4, key);
                updated = st.executeUpdate();
            }
            // If update failed, try to insert.
            if (updated == 0) {
                try (PreparedStatement st = conn.prepareStatement(
                        "INSERT INTO MALWARE (md5, file, malware, toAnalize) VALUES(?, ?, ?, ?)")) {
                    st.setString(1, key);
                    st.setString(2, (String) val.get("file"));
                    st.setString(3, (String) val.get("malware"));
                    st.setBoolean(4, (Boolean) val.get("toAnalize"));
                    st.executeUpdate();
                }
            }
        } catch (SQLException e) {
            throw new GridException("Failed to put object [key=" + key + ", val=" + val + ']', e);
        } finally {
            end(tx, conn);
        }
    }

    @Override
    public void loadAll(@Nullable GridCacheTx tx, Collection<? extends String> keys, GridBiInClosure<String, Map<String, Object>> c) throws GridException {
        Connection conn = null;

        try {
            conn = connection(tx);

            try (PreparedStatement st = conn.prepareStatement(
                    "SELECT * FROM MALWARE WHERE md5 IN (" + StringUtils.repeat("?", ",", keys.size()) + ")")) {
                int i = 1;

                for (String key : keys)
                    st.setString(i++, key.toString());

                ResultSet rs = st.executeQuery();

                while (rs.next())
                    c.apply(
                            rs.getString("md5"), // Key.
                            toMap(rs) // Value
                    );
            } catch (SQLException e) {
                throw new GridException("Failed to load objects: " + keys, e);
            } finally {
                end(tx, conn); // This method won't close connection if transaction is not null.
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void remove(@Nullable GridCacheTx tx, String key) throws GridException {
        System.out.println(">>> Store remove [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');

        Connection conn = null;

        try {
            conn = connection(tx);

            try (PreparedStatement st = conn.prepareStatement("DELETE FROM MALWARE WHERE md5=?")) {
                st.setString(1, key);

                st.executeUpdate();
            }
        } catch (SQLException e) {
            throw new GridException("Failed to remove object: " + key, e);
        } finally {
            end(tx, conn);
        }
    }

    @Override
    public void loadCache(GridBiInClosure<String, Map<String, Object>> clo, Object... args) throws GridException {
        if (args == null || args.length == 0 || args[0] == null)
            throw new GridException("Expected entry count parameter is not provided.");

        final int entryCnt = (Integer) args[0];

        Connection conn = null;

        try {
            conn = connection(null);

            try (PreparedStatement st = conn.prepareStatement("SELECT * FROM MALWARE")) {
                try (ResultSet rs = st.executeQuery()) {
                    int cnt = 0;

                    while (cnt < entryCnt && rs.next()) {
                        Map<String, Object> map = toMap(rs);
                        clo.apply(rs.getString("md5"), map);

                        cnt++;
                    }

                    System.out.println(">>> Loaded " + cnt + " values into cache.");
                }
            }
        } catch (SQLException e) {
            throw new GridException("Failed to load values from cache store.", e);
        } finally {
            end(null, conn);
        }
    }

    private void prepareDb() throws GridException {
        try (Connection conn = openConnection(false); Statement st = conn.createStatement()) {
            st.execute("CREATE TABLE IF NOT EXISTS MALWARE (md5 NUMERIC UNIQUE , file VARCHAR(255), " +
                    "malware VARCHAR(255), toAnalize BOOLEAN)");

            conn.commit();
        } catch (SQLException e) {
            throw new GridException("Failed to create database table.", e);
        }
    }

    private Connection openConnection(boolean autocommit) throws SQLException {
        Connection conn = DriverManager.getConnection("");

        conn.setAutoCommit(autocommit);

        return conn;
    }

    private Connection connection(@Nullable GridCacheTx tx) throws SQLException {
        if (tx != null) {
            Connection conn = tx.meta(ATTR_NAME);

            if (conn == null) {
                conn = openConnection(false);

                // Store connection in transaction metadata, so it can be accessed
                // for other operations on the same transaction.
                tx.addMeta(ATTR_NAME, conn);
            }

            return conn;
        }
        // Transaction can be null in case of simple load or put operation.
        else
            return openConnection(true);
    }


    private void end(@Nullable GridCacheTx tx, @Nullable Connection conn) {
        if (tx == null && conn != null) {
            // Close connection right away if there is no transaction.
            try {
                conn.close();
            } catch (SQLException ignored) {
                // No-op.
            }
        }
    }

    @Override
    public void txEnd(GridCacheTx tx, boolean commit) throws GridException {
        try (Connection conn = tx.removeMeta(ATTR_NAME)) {
            if (conn != null) {
                if (commit)
                    conn.commit();
                else
                    conn.rollback();
            }

            System.out.println(">>> Transaction ended [xid=" + tx.xid() + ", commit=" + commit + ']');
        } catch (SQLException e) {
            throw new GridException("Failed to end transaction [xid=" + tx.xid() + ", commit=" + commit + ']', e);
        }

    }

    private Map<String, Object> toMap(ResultSet sqlObject) throws SQLException {
        Map<String, Object> map = new HashMap<>();
        map.put("file", sqlObject.getString("file"));
        map.put("malware", sqlObject.getString("malware"));
        map.put("toAnalize", sqlObject.getBoolean("toAnalize"));

        return map;
    }
}
